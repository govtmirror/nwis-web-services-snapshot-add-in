'**************************************************************************
'**************************************************************************
'****
'**** This software is in the public domain because it contains materials that
'**** originally came from the United States Geological Survey, an agency of the
'**** United States Department of Interior. For more information, see the official
'**** USGS copyright policy at http://www.usgs.gov/visual-id/credit_usgs.html#copyright
'**** 
'**** This software is provided "AS IS".
'****
'**** The Snapshot add-in utility was based upon original work done by:
'****           David McCulloch, USGS Reston VA [dmccullo@usgs.gov]
'****
'**** Snapshot Team Leader: Sally Holl,    USGS TX-WSC Austin [sholl@usgs.gov]
'****           Programmer: David Maltby,  USGS TX-WSC Austin [drmaltby@usgs.gov]
'****           Programmer: Joseph Vrabel, USGS TX-WSC Austin [jvrabel@usgs.gov]
'****
'**************************************************************************
'**************************************************************************

'Designer class of the dockable window add-in.
'This is the main source code file for Snapshot.
'It contains callbacks to user-interface controls contained in the main dockable window.
'It also contains routines for reading and loading web service data.
Option Explicit On
Imports System.Xml
Imports System.IO
Imports System.Data.Odbc
Imports System.Windows.Forms
Imports System.Net
Imports ESRI.ArcGIS.Framework
Imports ESRI.ArcGIS.ArcMapUI
Imports ESRI.ArcGIS.esriSystem
Imports ESRI.ArcGIS.Carto
Imports ESRI.ArcGIS.Geodatabase
Imports ESRI.ArcGIS.Geometry

Public Class docSnapshot

    '**********************************************************
    'ESRI AUTOGENERATED - DO NOT EDIT BELOW:
    Private m_hook As Object

    'Host object of the dockable window
    Public Property Hook() As Object
        Get
            Return m_hook
        End Get
        Set(ByVal value As Object)
            m_hook = value
        End Set
    End Property

    'Implementation class of the dockable window add-in.
    'It is responsible for creating and disposing the user interface class for the dockable window.
    Public Class AddinImpl

        Inherits ESRI.ArcGIS.Desktop.AddIns.DockableWindow
        Private m_windowUI As docSnapshot

        Protected Overrides Function OnCreateChild() As System.IntPtr
            m_windowUI = New docSnapshot(Me.Hook)
            Return m_windowUI.Handle

        End Function

        Protected Overrides Sub Dispose(ByVal Param As Boolean)
            If m_windowUI IsNot Nothing Then
                m_windowUI.Dispose(Param)
            End If
            MyBase.Dispose(Param)

        End Sub

    End Class

    '----------------------------------------------------------
    'Initializations:
    Public Sub New(ByVal hook As Object)
        Me.Hook = hook 'NEED THIS
        'this call is required by the Windows Form Designer.
        'add any initialization after the InitializeComponent() call
        InitializeComponent() 'NEED THIS
        'END OF ESRI AUTOGENERATION - DO NOT EDIT ABOVE
        '**********************************************************

        'set whether we want the error reports:
        chkHelpSendErrorReport.Checked = True 'set False to turn off AND...
        chkHelpSendErrorReport.Visible = True '...set invisible to make choice unavailable to user

        'set tabcontrol DrawMode to OwnerDrawFixed - this will allow custom tab enabling / disabling
        tctrlSnapshot.DrawMode = TabDrawMode.OwnerDrawFixed

        ''disable QW, DV, and UV tabs - they are enabled after sites having available data are downloaded
        ''DON'T DO ON STARTUP - can have NWIS Sites already loaded in the current map
        'QW.Enabled = False
        'DV.Enabled = False
        'UV.Enabled = False
        'tctrlSnapshot.Refresh()

        '-------------------------------------
        'tooltip properties:
        ToolTip1.IsBalloon = True
        ToolTip1.BackColor = Drawing.Color.Cornsilk
        ToolTip1.AutoPopDelay = 1000 * 60 'amount of time to leave ToolTip on screen while mouse sites over control
        ToolTip1.InitialDelay = 1000 * 1  'delay time before ToolTip pops up when mouse sits over a control
        ToolTip1.ReshowDelay = 1000 * 0.5 'amount of time before the next ToolTip pops up when going to another control

        'misc tooltips strings:
        'ToolTip1.SetToolTip(lblDocStatus, "Download status messages") 'do not have a tooltip for this.
        ToolTip1.SetToolTip(prgDoc, "Overall progress of data download")

        '-------------------------------------
        'SITES TAB:

        '...sites groupbox
        rbSitesAll.Checked = True
        rbSitesActive.Checked = False
        rbSitesInactive.Checked = False

        ToolTip1.SetToolTip(rbSitesAll, "Do not restrict site retrieval based on site active/inactive status")
        ToolTip1.SetToolTip(rbSitesActive, "Request only active sites in current map extent")
        ToolTip1.SetToolTip(rbSitesInactive, "Request only inactive sites in current map extent")

        '...data type groupbox
        chkSitesDataTypeAll.Checked = True
        chkSitesDataTypeQW.Checked = False
        chkSitesDataTypeDV.Checked = False
        chkSitesDataTypeUV.Checked = False

        ToolTip1.SetToolTip(chkSitesDataTypeAll, "Do not restrict site retrieval based on available data types")
        ToolTip1.SetToolTip(chkSitesDataTypeQW, "Restrict site retrieval to sites in the current map extent with available Water Quality data." & vbCrLf & _
                                                "Water quality data refers to results from samples taken by technicians.")
        ToolTip1.SetToolTip(chkSitesDataTypeDV, "Restrict site retrieval to sites in the current map extent with available Daily Value data." & vbCrLf & _
                                                "Daily Values refer to summarized information for particular day, such as maximum, minimum and mean.")
        ToolTip1.SetToolTip(chkSitesDataTypeUV, "Restrict site retrieval to sites in the current map extent with available Unit Value data." & vbCrLf & _
                                                "Unit Values refer to time-series measurements typically made by automated equipment." & vbCrLf & _
                                                "In this context, 'Unit' Values is synonymous with 'Instantaneous' and 'Real-Time' values.")

        '...site type groupbox
        chkSitesAll.Checked = True
        chkSitesSW.Checked = False
        chkSitesGW.Checked = False
        chkSitesSP.Checked = False
        chkSitesAT.Checked = False
        chkSitesOT.Checked = False

        ToolTip1.SetToolTip(chkSitesAll, "Request all available sites types in the current map extent.")
        ToolTip1.SetToolTip(chkSitesSW, "Request Surface Water sites available in the current map extent." & vbCrLf & _
                                        "Surface Water sites include:" & vbCrLf & _
                                        "  - Streams" & vbCrLf & _
                                        "  - Lakes" & vbCrLf & _
                                        "  - Estuaries" & vbCrLf & _
                                        "  - Wetlands" & vbCrLf & _
                                        "  - Oceans")
        ToolTip1.SetToolTip(chkSitesGW, "Request Groundwater sites available in the current map extent." & vbCrLf & _
                                        "Groundwater sites include:" & vbCrLf & _
                                        "  - Wells" & vbCrLf & _
                                        "  - Other subsurface")
        ToolTip1.SetToolTip(chkSitesSP, "Request Spring sites available in the current map extent.")
        ToolTip1.SetToolTip(chkSitesAT, "Request Atmospheric sites available in the current map extent.")
        ToolTip1.SetToolTip(chkSitesOT, "Request Other sites available in the current map extent." & vbCrLf & _
                                        "Other sites include:" & vbCrLf & _
                                        "  - Land" & vbCrLf & _
                                        "  - Facility" & vbCrLf & _
                                        "  - Aggregate water-use establishment" & vbCrLf & _
                                        "  - Aggregate groundwater use" & vbCrLf & _
                                        "  - Aggregate surface water use")

        '...misc...
        ToolTip1.SetToolTip(btnSitesGet, "Retrieve available sites matching the above criteria")
        ToolTip1.SetToolTip(picSitesHelpIcon, "Launch online documentation for the Sites Tab (Internal Access Only)")

        '-------------------------------------
        'QW TAB:

        '...sites groupbox
        rbQWAllSites.Checked = False
        rbQWSelectedSites.Checked = True

        ToolTip1.SetToolTip(rbQWAllSites, "Request Water Quality data for all sites in the Snapshot database")
        ToolTip1.SetToolTip(rbQWSelectedSites, "Request Water Quality data only for selected sites in the Snapshot geodatabase")

        '...pcode groupbox
        txtQWPcodes.Text = "00010" & vbCrLf & _
                           "00045" & vbCrLf & _
                           "00055" & vbCrLf & _
                           "00060" & vbCrLf & _
                           "00065" & vbCrLf & _
                           "00095" & vbCrLf & _
                           "00300" & vbCrLf & _
                           "00400" & vbCrLf & _
                           "72019" & vbCrLf & _
                           "72020" & vbCrLf
        chkQWAllPcodes.Checked = False
        lblQWnPcode.Text = ""

        ToolTip1.SetToolTip(txtQWPcodes, "USGS parameter codes for which you wish to retrieve data." & vbCrLf & _
                                         "Add new parameters to the bottom of the current list." & vbCrLf & _
                                         "Type a single 5-digit entry per line and press enter after each.")
        ToolTip1.SetToolTip(btnQWPcodePicker, "Press to use the interactive USGS parameter code selection tool." & vbCrLf & _
                                              "Parameters chosen by the tool will overwrite any already in the listbox.")
        ToolTip1.SetToolTip(btnQWTopTenPcodes, "Press to set the 10 most commonly used USGS parameter codes:" & vbCrLf & _
                                               "    00010 Temperature, water [degrees Celsius]" & vbCrLf & _
                                               "    00045 Precipitation, total [inches]" & vbCrLf & _
                                               "    00055 Stream velocity [feet per second]" & vbCrLf & _
                                               "    00060 Discharge [cubic feet per second]" & vbCrLf & _
                                               "    00065 Gage height [feet]" & vbCrLf & _
                                               "    00095 Specific conductance, unfiltered water at 25 deg C [microsiemens per centimeter]" & vbCrLf & _
                                               "    00300 Dissolved oxygen, unfiltered water [milligrams per liter]" & vbCrLf & _
                                               "    00400 pH, unfiltered water [field, standard units]" & vbCrLf & _
                                               "    72019 Depth to water level [feet below land surface]" & vbCrLf & _
                                               "    72020 Elevation above NGVD 1929 [feet]" & vbCrLf & _
                                               "Any parameters already in the listbox will be overwritten with the above.")
        ToolTip1.SetToolTip(chkQWAllPcodes, "Check to download ALL available Water Quality data." & vbCrLf & _
                                            "Uncheck to download only the Water Quality parameter codes listed to te left")

        '...dates groupbox
        dtpQWStartDate.MinDate = #6/25/1859# 'note: NWISWeb goes back to 6/25/1859
        dtpQWStartDate.MaxDate = System.DateTime.Now
        Dim ts As TimeSpan = New System.TimeSpan(2, 0, 0, 0) '2 days
        dtpQWStartDate.Value = System.DateTime.Now.Subtract(ts) 'set QW start date to 2 days ago from today

        dtpQWEndDate.MinDate = #6/25/1859# 'note: NWISWeb goes back to 6/25/1859
        dtpQWEndDate.MaxDate = System.DateTime.Now
        dtpQWEndDate.Value = System.DateTime.Now

        chkQWAllDates.Checked = False

        ToolTip1.SetToolTip(dtpQWStartDate, "Choose a starting date for the data retrieval")
        ToolTip1.SetToolTip(dtpQWEndDate, "Choose an ending date for the data retrieval")
        ToolTip1.SetToolTip(chkQWAllDates, "Check to include all sample dates available from NWIS")

        '...misc...
        ToolTip1.SetToolTip(btnQWGet, "Retrieve Water Quality data using the above settings")
        ToolTip1.SetToolTip(picQWHelpIcon, "Launch online documentation for the Water Quality Tab (Internal Access Only)")

        '-------------------------------------
        'DV TAB:

        '...site groupbox...
        rbDVAllSites.Checked = False
        rbDVSelectedSites.Checked = True

        ToolTip1.SetToolTip(rbDVAllSites, "Request Daily Value data for all sites in the Snapshot database")
        ToolTip1.SetToolTip(rbDVSelectedSites, "Request Daily Value data only for selected sites in the Snapshot geodatabase")

        '...pcode groupbox...
        cboDVPcodes.SelectedItem = cboDVPcodes.Items(0)
        cboDVStat.SelectedItem = cboDVStat.Items(2) 'default MEAN

        ToolTip1.SetToolTip(cboDVPcodes, "Enter a 5-digit Daily Value parameter code or choose one of the top ten from the drop-dowm list")
        ToolTip1.SetToolTip(cboDVStat, "Select a Daily Value statistic code")

        '...date groupbox...
        dtpDVStartDate.MinDate = #6/25/1859# 'note: NWISWeb goes back to 6/25/1859
        dtpDVStartDate.MaxDate = System.DateTime.Now
        dtpDVStartDate.Value = System.DateTime.Now.Subtract(ts) 'set QW start date to 4 weeks ago from today
        dtpDVEndDate.MinDate = #6/25/1859# 'note: NWISWeb goes back to 6/25/1859
        dtpDVEndDate.MaxDate = System.DateTime.Now
        dtpDVEndDate.Value = System.DateTime.Now
        chkDVAllDates.Checked = False

        ToolTip1.SetToolTip(dtpDVStartDate, "Choose a starting date for the data retrieval")
        ToolTip1.SetToolTip(dtpDVEndDate, "Choose an ending date for the data retrieval")
        ToolTip1.SetToolTip(chkDVAllDates, "Check to include all dates available from NWIS")

        '...misc...
        ToolTip1.SetToolTip(btnDVGet, "Retrieve Daily Value data using the above settings")
        ToolTip1.SetToolTip(picDVHelpIcon, "Launch online documentation for the Daily Value Tab (Internal Access Only)")

        '-------------------------------------
        'UV TAB:

        '...site groupbox...
        rbUVAllSites.Checked = False
        rbUVSelectedSites.Checked = True

        ToolTip1.SetToolTip(rbUVAllSites, "Request Unit Value data for all sites in the Snapshot database")
        ToolTip1.SetToolTip(rbUVSelectedSites, "Request Unit Value data only for selected sites in the Snapshot geodatabase")

        '...pcode groupbox...
        cboUVPcodes.SelectedItem = cboUVPcodes.Items(0)

        ToolTip1.SetToolTip(cboUVPcodes, "Enter a 5-digit Unit Value parameter code or choose one of the top ten from the drop-dowm list")

        '...date groupbox...
        updUVDays.Minimum = 1
        updUVDays.Maximum = 120
        updUVDays.Increment = 1
        updUVDays.Value = 1

        dtpUVEndDate.MinDate = #6/25/1859# 'note: NWISWeb goes back to 6/25/1859
        dtpUVEndDate.MaxDate = System.DateTime.Now
        dtpUVEndDate.Value = System.DateTime.Now

        ToolTip1.SetToolTip(dtpUVEndDate, "Choose an ending date for the data retrieval." & vbCrLf & _
                                          "The requested retrieval period starts with the specified number of days back from this date.")
        ToolTip1.SetToolTip(updUVDays, "Select the number of days of data to retrieve back from the specified End Date." & vbCrLf & _
                                       "The End Date is included and counted as a retrieval day." & vbCrLf & _
                                       "Because of bandwidth considerations, the Web Service limits Unit Value retrievals to a maximum of 120 days.")


        '...misc...
        ToolTip1.SetToolTip(btnUVGet, "Retrieve Unit Value data using the above settings")
        ToolTip1.SetToolTip(picUVHelpIcon, "Launch online documentation for the Unit Value Tab (Internal Access Only)")

        '-------------------------------------
        'Help TAB:
        chkHelpToolTips.Checked = True 'tooltips on

        ToolTip1.SetToolTip(picHelpBanner, strSnapshotWebHomepage)
        ToolTip1.SetToolTip(rtfHelp, "")
        ToolTip1.SetToolTip(chkHelpToolTips, "Check to show ToolTip messages when the mouse pointer hovers over controls." & vbCrLf & _
                                             "Uncheck to prevent ToolTip messages from appearing.")
        ToolTip1.SetToolTip(chkHelpSendErrorReport, "Check to automatically send an error report to the development team when an unexpected error occurs." & vbCrLf & _
                                                    "Error reports contain information that help the development team reproduce the unexpected error and fix the problem for future releases." & vbCrLf & _
                                                    "When enabled, error reporting occurs in the background with no user interaction required." & vbCrLf & _
                                                    "Uncheck to disable this feature.")
        'rich text box help text:
        rtfHelp.Text = _
            "This tool demonstrates the use of ArcMap as a client for consuming NWIS Web Services. " & vbCrLf & _
            vbCrLf & _
            "The basic usage:" & vbCrLf & _
            vbCrLf & _
            "1) pan and zoom to an area of interest using standard ArcMap tools;" & vbCrLf & _
            vbCrLf & _
            "2) query the NWIS Sitefile Web Service to determine if there are sites  in the area of interest; and " & vbCrLf & _
            vbCrLf & _
            "3) query the NWIS Water Quality, Unit Values, or Daily Values Web Services to retrieve water data." & vbCrLf & _
            vbCrLf & _
            "Visit the Snapshot website for more information and complete documentation:" & vbCrLf & _
            vbCrLf & _
            strSnapshotWebHomepage

        'set some bold text in the rich text box
        Dim bfont As New Drawing.Font(rtfHelp.Font, System.Drawing.FontStyle.Bold) 'create new font object to set font style
        rtfHelp.SelectionStart = rtfHelp.Find("1)") 'use Find method to find "1)" and set return prop=SelectionStart to select text to format
        rtfHelp.SelectionFont = bfont 'assign the value selected to the font style
        rtfHelp.SelectionStart = rtfHelp.Find("2)")
        rtfHelp.SelectionFont = bfont
        rtfHelp.SelectionStart = rtfHelp.Find("3)")
        rtfHelp.SelectionFont = bfont

        'misc:
        lblDocStatus.Text = ""

        'update form
        UpdateForm()

        '-------------------------------------
        'check if can connect to each (?) icon help link and make Visible=False if cannot access.

        'Sites help icon:
        If InternetConnectionAvailable(strSitesHelpWebPage) = False Then 'can't connect
            picSitesHelpIcon.Visible = False
        End If

        'QW help icon:
        If InternetConnectionAvailable(strQWHelpWebPage) = False Then 'can't connect
            picQWHelpIcon.Visible = False
        End If

        'DV help icon:
        If InternetConnectionAvailable(strDVHelpWebPage) = False Then 'can't connect
            picDVHelpIcon.Visible = False
        End If

        'UV help icon:
        If InternetConnectionAvailable(strUVHelpWebPage) = False Then 'can't connect
            picUVHelpIcon.Visible = False
        End If

    End Sub


    '==========================================================
    'Sites TAB

    'tctrlSnapshot_Selecting
    Private Sub tctrlSnapshot_Selecting(ByVal sender As System.Object, ByVal e As System.Windows.Forms.TabControlCancelEventArgs) Handles tctrlSnapshot.Selecting
        'do not allow a disabled tab to be selected
        If (Not e.TabPage.Enabled) Then e.Cancel = True
    End Sub

    'tctrlSnapshot_DrawItem
    Private Sub tctrlSnapshot_DrawItem(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DrawItemEventArgs) Handles tctrlSnapshot.DrawItem
        'custom draw disabled tabs as greyed out
        'custom draw enabled  tabs normally
        Dim page As TabPage = tctrlSnapshot.TabPages(e.Index)
        If (Not page.Enabled) Then
            Dim brush As System.Drawing.SolidBrush = New System.Drawing.SolidBrush(System.Drawing.SystemColors.GrayText)
            e.Graphics.DrawString(page.Text, page.Font, brush, e.Bounds)
        Else
            Dim brush As System.Drawing.SolidBrush = New System.Drawing.SolidBrush(page.ForeColor)
            e.Graphics.DrawString(page.Text, page.Font, brush, e.Bounds)
        End If
    End Sub

    'set all site DataType checkboxes CheckedChanged events to UpdateForm
    Private Sub chkSitesDataTypeAll_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSitesDataTypeAll.CheckedChanged
        UpdateForm()
    End Sub
    Private Sub chkSitesDataTypeQW_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSitesDataTypeQW.CheckedChanged
        UpdateForm()
    End Sub
    Private Sub chkSitesDataTypeDV_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSitesDataTypeDV.CheckedChanged
        UpdateForm()
    End Sub
    Private Sub chkSitesDataTypeUV_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSitesDataTypeUV.CheckedChanged
        UpdateForm()
    End Sub
    Private Sub chkSitesDataTypeGW_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        UpdateForm()
    End Sub
    Private Sub chkSitesDataTypePK_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        UpdateForm()
    End Sub
    Private Sub chkSitesDataTypeID_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        UpdateForm()
    End Sub
    Private Sub chkSitesDataTypeAW_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        UpdateForm()
    End Sub
    Private Sub chkSitesDataTypeAD_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        UpdateForm()
    End Sub
    Private Sub chkSitesDataTypeSV_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        UpdateForm()
    End Sub

    'set all site type checkboxes CheckedChanged events to UpdateForm
    Private Sub chkSitesAll_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSitesAll.CheckedChanged
        UpdateForm()
    End Sub
    Private Sub chkSitesSW_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSitesSW.CheckedChanged
        UpdateForm()
    End Sub
    Private Sub chkSitesGW_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSitesGW.CheckedChanged
        UpdateForm()
    End Sub
    Private Sub chkSitesSP_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSitesSP.CheckedChanged
        UpdateForm()
    End Sub
    Private Sub chkSitesAT_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSitesAT.CheckedChanged
        UpdateForm()
    End Sub
    Private Sub chkSitesOT_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSitesOT.CheckedChanged
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'btnSitesGet

    'btnSitesGet_Click
    Private Sub btnSitesGet_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSitesGet.Click
        'process Sites request
        Try
            SitesGet()
        Catch ex As Exception
            'give message
            MessageBox.Show( _
                "A problem has occured processing your request." & vbCrLf _
                 & "Please make sure you have this tool installed correctly." & vbCrLf _
                 & vbCrLf _
                 & "DETAILS:" & vbCrLf _
                 & ex.Message, _
                 "Snapshot", _
            MessageBoxButtons.OK, _
            MessageBoxIcon.Exclamation, _
            MessageBoxDefaultButton.Button1)

            'send error report if turned on
            If chkHelpSendErrorReport.Checked Then SendErrorReport(ex)

            'need to reset after failure
            ExitCleanUp()
        End Try
    End Sub


    '----------------------------------------------------------
    'picSitesHelpIcon

    'picSitesHelpIcon_Click
    Private Sub picSitesHelpIcon_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picSitesHelpIcon.Click
        LaunchWeb(strSitesHelpWebPage)
    End Sub


    '==========================================================
    'QW TAB

    '----------------------------------------------------------
    'txtQWPcodes

    'txtQWPcodes_KeyUp
    Private Sub txtQWPcodes_KeyUp(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtQWPcodes.KeyUp
        'handle keystroke events for matching listbox

        'disable get button for each keypress - it will be re-enabled on successful UpdateForm()
        btnQWGet.Enabled = False

        'CTRL+A: select all
        If e.KeyCode = Keys.A AndAlso e.Control = True Then
            txtQWPcodes.SelectAll()
            Exit Sub
        End If

        'DELETE: update
        If e.KeyCode = Keys.Delete Then
            UpdateForm()
            Exit Sub
        End If

        'ENTER: goto new line (for some reason this is not being done even though AcceptsReturn is set to True)
        If e.KeyCode = Keys.Enter Then
            'do nothing if there are not 5 characters on the current line
            If (txtQWPcodes.Text.Length - txtQWPcodes.GetFirstCharIndexOfCurrentLine()) <> 5 Then
                Exit Sub
            End If

            'OK - goto next line
            txtQWPcodes.AppendText(vbCrLf)
            UpdateForm()
            Exit Sub
        End If

    End Sub


    'txtQWPcodes_KeyPress
    Private Sub txtQWPcodes_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtQWPcodes.KeyPress
        'backspace is OK
        If Microsoft.VisualBasic.Asc(e.KeyChar) = Keys.Back Then Exit Sub

        'only allow digits
        If Not Char.IsDigit(e.KeyChar) Then
            e.Handled = True
        End If

        'do not allow more than 5 characters on a line
        If (txtQWPcodes.Text.Length - txtQWPcodes.GetFirstCharIndexOfCurrentLine()) >= 5 Then
            e.Handled = True
        End If

    End Sub


    'txtQWPcodes_Leave
    Private Sub txtQWPcodes_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtQWPcodes.Leave
        'check and update when leaving textbox
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'btnQWPcodePicker

    'btnQWPcodePicker_Click
    Private Sub btnQWPcodePicker_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnQWPcodePicker.Click
        'show the PcodePicker form as a modal dialog
        'this keep the PcodePicker on top and Snapshot disabled and on the bottom
        Dim frmPcodePicker As New frmPcodePicker
        frmPcodePicker.StartPosition = FormStartPosition.CenterParent
        frmPcodePicker.ShowDialog()

        'frmPcodePicker set global variable 'strQWPcodes' upon exit

        'if it is empty (""), cancel was hit
        If strQWPcodes = "" Then
            Exit Sub 'do nothing
        End If

        'update the pcode textbox:
        txtQWPcodes.Text = strQWPcodes 'string of pcodes delimited by vbCrLf
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'btnQWTopTenPcodes

    'btnQWTopTenPcodes_Click
    Private Sub btnQWTopTenPcodes_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnQWTopTenPcodes.Click
        'populate txtbox with top 10
        txtQWPcodes.Text = "00010" & vbCrLf & _
                           "00045" & vbCrLf & _
                           "00055" & vbCrLf & _
                           "00060" & vbCrLf & _
                           "00065" & vbCrLf & _
                           "00095" & vbCrLf & _
                           "00300" & vbCrLf & _
                           "00400" & vbCrLf & _
                           "72019" & vbCrLf & _
                           "72020" & vbCrLf
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'chkQWAllPcodes

    'chkQWAllPcodes_CheckedChanged
    Private Sub chkQWAllPcodes_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkQWAllPcodes.CheckedChanged
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'dtpQWStartDate

    'dtpQWStartDate_ValueChanged
    Private Sub dtpQWStartDate_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dtpQWStartDate.ValueChanged
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'dtpQWEndDate

    'dtpQWEndDate_ValueChanged
    Private Sub dtpQWEndDate_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dtpQWEndDate.ValueChanged
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'chkQWAllDates

    'chkQWAllDates_CheckedChanged
    Private Sub chkQWAllDates_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkQWAllDates.CheckedChanged
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'btnQWGet

    'btnQWGet_Click
    Private Sub btnQWGet_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnQWGet.Click
        'process QW request
        Try
            QWGet()
        Catch ex As Exception
            'give message
            MessageBox.Show( _
                "A problem has occured processing your request." & vbCrLf _
                 & "Please make sure you have this tool installed correctly." & vbCrLf _
                 & vbCrLf _
                 & "DETAILS:" & vbCrLf _
                 & ex.Message, _
                 "Snapshot", _
            MessageBoxButtons.OK, _
            MessageBoxIcon.Exclamation, _
            MessageBoxDefaultButton.Button1)

            'send error report if turned on
            If chkHelpSendErrorReport.Checked Then SendErrorReport(ex)

            'need to reset after failure
            ExitCleanUp()
        End Try
    End Sub 'btnQWGet_Click


    '----------------------------------------------------------
    'picQWHelpIcon

    'picQWHelpIcon_Click
    Private Sub picQWHelpIcon_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picQWHelpIcon.Click
        LaunchWeb(strQWHelpWebPage)
    End Sub


    '==========================================================
    'DV TAB

    '----------------------------------------------------------
    'cboDVPcodes

    'cboDVPcodes_DropDown
    Private Sub cboDVPcodes_DropDown(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboDVPcodes.DropDown
        'make color white when drop down
        cboDVPcodes.BackColor = Drawing.Color.White
    End Sub

    'cboDVPcodes_DropDownClosed
    Private Sub cboDVPcodes_DropDownClosed(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboDVPcodes.DropDownClosed
        'update
        UpdateForm()
    End Sub


    'cboDVPcodes_Enter
    Private Sub cboDVPcodes_Enter(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboDVPcodes.Enter
        'clear text
        cboDVPcodes.Text = ""
        cboDVPcodes.SelectedIndex = -1 'this does not update on enter and need it updated for UpdateForm
        UpdateForm()
        cboDVPcodes.Focus()
    End Sub

    'cboDVPcodes_KeyUp
    Private Sub cboDVPcodes_KeyUp(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboDVPcodes.KeyUp
        'handle keystroke events for matching listbox
        UpdateForm()
    End Sub


    'cboDVPcodes_KeyPress
    Private Sub cboDVPcodes_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboDVPcodes.KeyPress
        'backspace is OK
        If Microsoft.VisualBasic.Asc(e.KeyChar) = Keys.Back Then Exit Sub

        'if ENTER and number less than 5 chars, pad out to 5 chars with leading 0's and goto next control
        If Microsoft.VisualBasic.Asc(e.KeyChar) = Keys.Enter AndAlso IsNumeric(cboDVPcodes.Text) Then
            Dim str As String = cboDVPcodes.Text
            Do While str.Length < 5
                str = "0" & str
            Loop
            cboDVPcodes.Text = str
            Me.SelectNextControl(Me.ActiveControl, True, True, True, True)
            Exit Sub
        End If

        'only allow digits
        If Not Char.IsDigit(e.KeyChar) Then
            e.Handled = True
        End If

        'do not allow more than 5 characters on a line
        If cboDVPcodes.Text.Length >= 5 Then
            e.Handled = True
        End If
    End Sub

    'cboDVPcodes_Leave
    Private Sub cboDVPcodes_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboDVPcodes.Leave
        'if number less than 5 chars, pad out to 5 chars with leading 0's
        If IsNumeric(cboDVPcodes.Text) Then
            Dim str As String = cboDVPcodes.Text
            Do While str.Length < 5
                str = "0" & str
            Loop
            cboDVPcodes.Text = str
        End If

        'check and update when leaving textbox
        UpdateForm()
    End Sub

    'cboDVPcodes_SelectedIndexChanged
    Private Sub cboDVPcodes_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboDVPcodes.SelectedIndexChanged
        'changed to a list item - goto next control and update.
        Me.SelectNextControl(Me.ActiveControl, True, True, True, True)
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'dtpDVStartDate

    'dtpDVStartDate_ValueChanged
    Private Sub dtpDVStartDate_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dtpDVStartDate.ValueChanged
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'dtpDVEndDate

    'dtpDVEndDate_ValueChanged
    Private Sub dtpDVEndDate_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dtpDVEndDate.ValueChanged
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'chkDVAllDates

    'chkDVAllDates_CheckedChanged
    Private Sub chkDVAllDates_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDVAllDates.CheckedChanged
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'btnDVGet

    'btnDVGet_Click
    Private Sub btnDVGet_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDVGet.Click
        'process DV request
        Try
            DVGet()
        Catch ex As Exception
            'give message
            MessageBox.Show( _
                "A problem has occured processing your request." & vbCrLf _
                 & "Please make sure you have this tool installed correctly." & vbCrLf _
                 & vbCrLf _
                 & "DETAILS:" & vbCrLf _
                 & ex.Message, _
                 "Snapshot", _
            MessageBoxButtons.OK, _
            MessageBoxIcon.Exclamation, _
            MessageBoxDefaultButton.Button1)

            'send error report if turned on
            If chkHelpSendErrorReport.Checked Then SendErrorReport(ex)

            'need to reset after failure
            ExitCleanUp()
        End Try
    End Sub 'btnDVGet_Click


    '----------------------------------------------------------
    'picDVHelpIcon

    'picDVHelpIcon_Click
    Private Sub picDVHelpIcon_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picDVHelpIcon.Click
        LaunchWeb(strDVHelpWebPage)
    End Sub


    '==========================================================
    'UV TAB

    '----------------------------------------------------------
    'cboUVPcodes

    'cboUVPcodes_DropDown
    Private Sub cboUVPcodes_DropDown(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboUVPcodes.DropDown
        'make color white when drop down
        cboUVPcodes.BackColor = Drawing.Color.White
    End Sub

    'cboUVPcodes_DropDownClosed
    Private Sub cboUVPcodes_DropDownClosed(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboUVPcodes.DropDownClosed
        'update
        UpdateForm()
    End Sub

    'cboUVPcodes_Enter
    Private Sub cboUVPcodes_Enter(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboUVPcodes.Enter
        'clear text
        cboUVPcodes.Text = ""
        cboUVPcodes.SelectedIndex = -1 'this does not update on enter and need it updated for UpdateForm
        UpdateForm()
        cboUVPcodes.Focus()
    End Sub

    'cboUVPcodes_KeyUp
    Private Sub cboUVPcodes_KeyUp(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboUVPcodes.KeyUp
        'handle keystroke events for matching listbox
        UpdateForm()
    End Sub

    'cboUVPcodes_KeyPress
    Private Sub cboUVPcodes_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cboUVPcodes.KeyPress
        'backspace is OK
        If Microsoft.VisualBasic.Asc(e.KeyChar) = Keys.Back Then Exit Sub

        'if ENTER and number less than 5 chars, pad out to 5 chars with leading 0's and goto next control
        If Microsoft.VisualBasic.Asc(e.KeyChar) = Keys.Enter AndAlso IsNumeric(cboUVPcodes.Text) Then
            Dim str As String = cboUVPcodes.Text
            Do While str.Length < 5
                str = "0" & str
            Loop
            cboUVPcodes.Text = str
            Me.SelectNextControl(Me.ActiveControl, True, True, True, True)
            Exit Sub
        End If

        'only allow digits
        If Not Char.IsDigit(e.KeyChar) Then
            e.Handled = True
        End If

        'do not allow more than 5 characters on a line
        If cboUVPcodes.Text.Length >= 5 Then
            e.Handled = True
        End If
    End Sub

    'cboUVPcodes_Leave
    Private Sub cboUVPcodes_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboUVPcodes.Leave
        'if number less than 5 chars, pad out to 5 chars with leading 0's
        If IsNumeric(cboUVPcodes.Text) Then
            Dim str As String = cboUVPcodes.Text
            Do While str.Length < 5
                str = "0" & str
            Loop
            cboUVPcodes.Text = str
        End If

        'check and update when leaving textbox
        UpdateForm()
    End Sub

    'cboUVPcodes_SelectedIndexChanged
    Private Sub cboUVPcodes_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboUVPcodes.SelectedIndexChanged
        'changed to a list item - goto next control and update.
        Me.SelectNextControl(Me.ActiveControl, True, True, True, True)
        UpdateForm()
    End Sub


    '----------------------------------------------------------
    'btnUVGet

    'btnUVGet_Click
    Private Sub btnUVGet_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnUVGet.Click
        'process UV request
        Try
            UVGet()
        Catch ex As Exception
            'give message
            MessageBox.Show( _
                "A problem has occured processing your request." & vbCrLf _
                 & "Please make sure you have this tool installed correctly." & vbCrLf _
                 & vbCrLf _
                 & "DETAILS:" & vbCrLf _
                 & ex.Message, _
                 "Snapshot", _
            MessageBoxButtons.OK, _
            MessageBoxIcon.Exclamation, _
            MessageBoxDefaultButton.Button1)

            'send error report if turned on
            If chkHelpSendErrorReport.Checked Then SendErrorReport(ex)

            'need to reset after failure
            ExitCleanUp()
        End Try
    End Sub


    '----------------------------------------------------------
    'picUVHelpIcon

    'picUVHelpIcon_Click
    Private Sub picUVHelpIcon_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picUVHelpIcon.Click
        LaunchWeb(strUVHelpWebPage)
    End Sub


    '==========================================================
    'Help TAB

    '----------------------------------------------------------
    'picHelpBanner_Click
    Private Sub picHelpBanner_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picHelpBanner.Click
        'goto Snapshot homepage when click on banner.
        LaunchWeb(strSnapshotWebHomepage)

    End Sub


    '----------------------------------------------------------
    'chkHelpToolTips

    'chkHelpToolTips_CheckedChanged
    Private Sub chkHelpToolTips_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkHelpToolTips.CheckedChanged
        'activate or deactivate tooltips based on chkHelpToolTips box
        If chkHelpToolTips.Checked Then 'turn on
            ToolTip1.Active = True
        Else
            ToolTip1.Active = False
        End If

    End Sub


    '----------------------------------------------------------
    'rtfHelp

    'rtfHelp_LinkClicked
    Private Sub rtfHelp_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles rtfHelp.LinkClicked
        'launch the link clicked in the rich text box.
        LaunchWeb(e.LinkText)
    End Sub


    '==========================================================
    '==========================================================
    'GetSite
    Public Sub SitesGet()
        'retrieve Site data using specified settings
        'clear all "NWIS Sites" layer features and re-populate with new site data.
        'all data tables also cleared if new sites are uploaded.

        'flush event queue
        Application.DoEvents()

        'all user settings should already be validated.

        'start the progress bar and disable Snapshot tabs
        prgDoc.Value = 1
        tctrlSnapshot.Enabled = False

        '-----------------------------------------
        'test for an internet connection to the serivce
        lblDocStatus.Text = "Checking web service availablity"
        lblDocStatus.Refresh()

        'this is interactive and allow retrys
        If TestWebConnection(strSitesBaseURL) = False Then
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'the "NWIS Sites" layer is required for this tool - make sure the current map has that layer.
        lblDocStatus.Text = "Checking for NWIS Sites layer"
        lblDocStatus.Refresh()

        'get ArcMap Document and Focus Map
        Dim pMxDoc As IMxDocument = My.ArcMap.Document
        Dim pMap As IMap = pMxDoc.FocusMap

        'search for "NWIS Sites" layer
        Dim NWIS_FeatureLayer As IFeatureLayer = Nothing
        Dim pEnumLayer As IEnumLayer = pMap.Layers(Nothing, True)
        pEnumLayer.Reset()
        Dim pLayer As ILayer = pEnumLayer.Next
        While Not pLayer Is Nothing 'loop though all layers of the current focus map
            If pLayer.Name = "NWIS Sites" Then 'found it
                NWIS_FeatureLayer = pLayer
                Exit While 'done
            End If
            pLayer = pEnumLayer.Next
        End While

        'if the "NWIS Sites" layer was not found then give message and exit
        If NWIS_FeatureLayer Is Nothing Then 'didn't find it
            MessageBox.Show( _
                "The 'NWIS Sites' layer could not be found in the table of contents of the active map." & vbCrLf _
                & vbCrLf _
                & "The Snapshot tool requires the 'NWIS Sites' layer for populating downloaded sites and defining site symbology. " _
                & "Please refer to the documentation for further information.", _
                "Snapshot", _
                MessageBoxButtons.OK, _
                MessageBoxIcon.Exclamation, _
                MessageBoxDefaultButton.Button1)
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'get the feature class
        Dim NWIS_FeatureClass As IFeatureClass = NWIS_FeatureLayer.FeatureClass

        'we have a catch-22 here:
        'we need to get the map projection of the web service feature class,
        'but we need to project the document's map extent to the map projection of the web service feature class before we add features.
        'We grab the spatial reference for later use.
        Dim pFieldsTemp As IFields = NWIS_FeatureClass.Fields
        Dim pSpatRef As ISpatialReference = pFieldsTemp.Field(pFieldsTemp.FindField(NWIS_FeatureClass.ShapeFieldName)).GeometryDef.SpatialReference

        'get the current map extent so the web service only returns sites in the current view
        'pEnv is the current map extent in whatever map projection is being used for the active map,
        'so we project it to match the web service
        Dim pEnv As IEnvelope = pMxDoc.ActiveView.Extent
        pEnv.Project(pSpatRef)

        'compute the square degrees of the map extent and see if it over the Snapshot limit
        Dim dbl_AreaSqDeg As Double = System.Math.Abs((pEnv.XMax - pEnv.XMin) * (pEnv.YMax - pEnv.YMin))
        If dbl_AreaSqDeg > dblSnapshot_MaxAreaSqDeg Then 'Snapshot limit shared parameter set in Module_Shared
            'map extent too big
            MessageBox.Show( _
               "The current map extent exceeds the maximum spatial range allowed." & vbCrLf _
               & vbCrLf _
               & "To minimize strain on Web Services and keep retrieval sizes reasonable, " & vbCrLf _
               & "the maximum spatial extent is restricted to " & dblSnapshot_MaxAreaSqDeg.ToString & " square degrees." & vbCrLf _
               & "The current map extent spans " & dbl_AreaSqDeg.ToString & " square degrees." & vbCrLf _
               & vbCrLf _
               & "Please zoom the map in to reduce the map extent.", _
               "Snapshot", _
               MessageBoxButtons.OK, _
               MessageBoxIcon.Information, _
               MessageBoxDefaultButton.Button1)
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'build webservice URL to use (everything except siteType)
        Dim WS_URL As String = strSitesBaseURL 'base and output format

        'add active / inactive (siteStatus) (one radio button can be checked)
        'note: if you compare the same URL and just change &siteStatus from 'all' to 'active' to 'inactive',
        '      the sum of the 'active' and 'inactive' hits is much smaller than 'all'.
        '      it seems 'active' and 'inactive' are not mutually exclusive,
        '      and there are other '&siteStatus' types that cannot be accessed by themselves.
        If rbSitesAll.Checked Then
            'note: it seems not including this has the same effect as specifying 'all'
            WS_URL = WS_URL & "&siteStatus=all"

        ElseIf rbSitesActive.Checked Then
            WS_URL = WS_URL & "&siteStatus=active"

        ElseIf rbSitesInactive.Checked Then
            WS_URL = WS_URL & "&siteStatus=inactive"

        End If

        'add the data types
        If chkSitesDataTypeAll.Checked Then
            'note: omitting &hasDataTypeCd altogther seems to return more hits than
            '      explicitly specifying each, eg: &hasDataTypeCd=iv,dv,pk,sv,gw,qw,id,aw,ad

            'NOTE: doing nothing (eg, not including this keyword option in the URL) will default to everything
            'this will return sites that have dataTypes that cannot be retieved with this tool

            'restrict the sites returned to those that have the dataTypes that can be retrieved with this tool
            WS_URL = WS_URL & "&hasDataTypeCd=qw,dv,iv"

        Else
            'add comma-separated list of those checked
            'can have any number without error
            WS_URL = WS_URL & "&hasDataTypeCd="
            If chkSitesDataTypeQW.Checked Then WS_URL = WS_URL & "qw,"
            If chkSitesDataTypeDV.Checked Then WS_URL = WS_URL & "dv,"
            If chkSitesDataTypeUV.Checked Then WS_URL = WS_URL & "iv,"

            'remove trailing comma if there is one
            If WS_URL.Substring(WS_URL.Length - 1, 1) = "," Then WS_URL = WS_URL.Substring(0, WS_URL.Length - 1)

        End If

        'handle siteType:
        '
        'major site type codes (site_tp_cd):
        '  SW: surface water
        '       ST = stream
        '       LK = lake
        '       ES = estuary
        '       WE = wetlands
        '       OC = ocean
        '
        '   GW: groundwater
        '       GW = well
        '       SB = other subsurface
        '
        '   SP: spring
        '       SP = Spring
        '
        '   AT: atmospheric
        '       AT = atmospheric (UNDOCUMENTED BUT WORKS WITH WEBSERVICE)
        '
        '   OT: other
        '       LA = land  <== DUE TO LIMIT, OMIT THIS ONE
        '       FA = facility
        '       AW = aggregate water-use establishment
        '       AG = aggregate groundwater use
        '       AS = aggregate surface water use
        '
        'NOTE: as of  8/ 9/2011 more than 4 causes webservice error
        'NOTE: as of 10/14/2011 4 limit seems upped to 50 - do not need muliple webservice queries
        If chkSitesAll.Checked Then
            'ALL: not specifying is all by default

        Else
            'add comma-separated list of those checked
            WS_URL = WS_URL & "&siteType="
            If chkSitesSW.Checked Then WS_URL = WS_URL & "ST,LK,ES,WE,OC,"
            If chkSitesGW.Checked Then WS_URL = WS_URL & "GW,SB,"
            If chkSitesSP.Checked Then WS_URL = WS_URL & "SP,"
            If chkSitesAT.Checked Then WS_URL = WS_URL & "AT,"
            If chkSitesOT.Checked Then WS_URL = WS_URL & "LA,FA,AW,AG,AS,"

            'remove trailing comma if there is one
            If WS_URL.Substring(WS_URL.Length - 1, 1) = "," Then WS_URL = WS_URL.Substring(0, WS_URL.Length - 1)

        End If

        'note: as of 10-14-2011, webservice limits the spatial extent to 25 square degrees.
        '      no data is returned if map extent exceeds this.
        '      to enable larger data retrievals, we need to partition the map extent into mulitple
        '      vertical rectangles as needed so each does not exceed the limit.
        '      a separate webservice call is made for each partition.

        'find number and width of partitioning needed to satisfy area limit
        'note: the limit (dblSiteService_MaxAreaSqDeg) is set as a shared parm in Module_Shared
        Dim nPartitions As Integer = 1
        Dim partitionWidth As Double = pEnv.XMax - pEnv.XMin
        Do While dbl_AreaSqDeg > dblSiteService_MaxAreaSqDeg 'divide the x-range until the area limit is met
            nPartitions = nPartitions + 1 'partition size still too big - add another
            partitionWidth = (pEnv.XMax - pEnv.XMin) / CDbl(nPartitions)
            dbl_AreaSqDeg = System.Math.Abs(partitionWidth * (pEnv.YMax - pEnv.YMin)) 'recompute partition area
        Loop

        '-----------------------------------------
        'do an initial query to see how many sites will be returned.
        'bail if there are 0 sites or the query crashes.
        'count also used to accurately update progress bar during data retrieval query

        'loop through partitions and perform separate query for each
        Dim nSites As Integer = 0
        Dim xMin As Double = pEnv.XMin
        For i As Integer = 1 To nPartitions
            'update status
            lblDocStatus.Text = "Querying web service for available sites (" & i.ToString & " of " & nPartitions.ToString & " partitions)"
            lblDocStatus.Refresh() 'repaint status label to update
            If prgDoc.Value < 100 Then
                prgDoc.Value = 100 * i / nPartitions
            End If

            'set the right coord of the current partition
            Dim xMax As Double = xMin + partitionWidth

            'add the bounding box (bBox) coords to the URL for this partition
            'note only the x-coords change (vertical rectangles shifting left to right)
            'webservice gives error if more than 6 decimal places in coord numbers.
            Dim WS_URL_partition As String = WS_URL & "&bBox=" _
                & xMin.ToString("#.######").Trim & "," _
                & pEnv.YMin.ToString("#.######").Trim & "," _
                & xMax.ToString("#.######").Trim & "," _
                & pEnv.YMax.ToString("#.######").Trim

            'query webservice
            Try
                Dim reader As System.Xml.XmlReader
                reader = System.Xml.XmlReader.Create(WS_URL_partition)
                While (reader.Read())
                    reader.MoveToContent()
                    If reader.Name <> "site" Then Continue While 'not a site node
                    nSites = nSites + 1
                End While
                reader.Close()

            Catch ex As Exception
                'do nothing - the webservice returns "404 ERROR: No sites found matching this request (caas01)" if no sites

            End Try

            'reset xMin to goto next partition
            xMin = xMax
        Next i
        prgDoc.Value = 0 'reset progress bar

        'give message
        If nSites <= 0 Then
            MessageBox.Show( _
                "No sites matching the specified criteria were returned by the Web Service" & vbCrLf _
                & "for the current map extent and search criteria." & vbCrLf _
                & vbCrLf _
                & "Try zooming the map extent out or refining your search criteria.", _
                "Snapshot", _
                MessageBoxButtons.OK, _
                MessageBoxIcon.Information, _
                MessageBoxDefaultButton.Button1)
            ExitCleanUp()
            Exit Sub
        Else
            Dim nOldSites As Integer = NWIS_FeatureClass.FeatureCount(New QueryFilter)
            Dim msgStr As String
            If nOldSites <= 0 Then
                msgStr = _
                    nSites.ToString & " site(s) were found in the current map extent matching the selection criteria." & vbCrLf _
                    & vbCrLf _
                    & "Add these site(s) to the NWIS Sites layer?"
            Else
                msgStr = _
                    nSites.ToString & " site(s) were found in the current map extent matching the selection criteria." & vbCrLf _
                    & vbCrLf _
                    & "Replace the existing " & nOldSites.ToString & " site(s) in the NWIS Sites layer with these site(s)?" & vbCrLf _
                    & "Any Water Quality, Daily Value, and/or Unit Value data downloaded for the existing sites will be cleared."
            End If
            Dim intResponse As Integer = MessageBox.Show( _
                msgStr, _
                "Snapshot", _
                MessageBoxButtons.YesNo, _
                MessageBoxIcon.Question, _
                MessageBoxDefaultButton.Button1)
            If intResponse = DialogResult.No Then
                ExitCleanUp()
                Exit Sub
            End If
        End If

        '-----------------------------------------
        'OK - we're set to do the full data pull and upload.

        'start a new Stopwatch (maybe put this at top as a global and start/stop same stopwatch).
        Dim stopwatch As Stopwatch = stopwatch.StartNew

        'to make sure the OID's are properly updated, we need to do the deletes during and edit session
        Dim NWIS_dataset As IDataset = NWIS_FeatureClass
        Dim MyWorkspace As IWorkspace = NWIS_dataset.Workspace
        Dim MyWorkspaceEdit As IWorkspaceEdit = CType(MyWorkspace, IWorkspaceEdit)
        Dim pSource = MyWorkspace.PathName

        'since we are using the feature class as a "container" we need to delete all the current features (if any)
        'so we start with a default cursor that returns all features
        'loop through "NWIS Sites" layer features and delete them
        Dim pQfilter As New QueryFilter
        Dim pFeatCursor As IFeatureCursor = NWIS_FeatureClass.Search(pQfilter, False)
        Dim pFeature As IFeature = pFeatCursor.NextFeature
        If pFeature IsNot Nothing Then 'have sites
            'delete the sites in the sites table
            lblDocStatus.Text = "Deleting old 'NWIS Sites' layer features"
            lblDocStatus.Refresh() 'repaint status label to update
            TruncTables(pSource, "sitefile, sitefile_Shape_Index")

            'if we are deleting the sites, we should also delete the QW, DV, and UV tables
            lblDocStatus.Text = "Clearing database tables"
            lblDocStatus.Refresh() 'repaint status label to update
            TruncTables(pSource, "qw_result, qw_sample, dv_result, uv_result")

            'refresh the map
            pMxDoc.ActiveView.Refresh()
        End If

        'dimension these for projecting the sites to the user's map projection
        Dim t As Type = Type.GetTypeFromProgID("esriGeometry.SpatialReferenceEnvironment")
        Dim obj As System.Object = Activator.CreateInstance(t)
        Dim pSpatialReferenceEnv As ESRI.ArcGIS.Geometry.ISpatialReferenceFactory3 = obj

        'this needs to be done inside an edit session, but again, no need for overhead of redos
        If Not MyWorkspaceEdit.IsBeingEdited() = True Then
            MyWorkspaceEdit.StartEditing(False)
        End If

        'loop through partitions and perform separate query for each
        Dim iSites As Integer = 0
        xMin = pEnv.XMin
        For i As Integer = 1 To nPartitions

            'get the right coord of the current partition
            Dim xMax As Double = xMin + partitionWidth

            'add the bounding box (bBox) coords to the URL for this partition
            'note only the x-coords change (vertical rectangles shifting left to right)
            'webservice gives error if more than 6 decimal places in coord numbers.
            Dim WS_URL_partition As String = WS_URL & "&bBox=" _
                & xMin.ToString("#.######").Trim & "," _
                & pEnv.YMin.ToString("#.######").Trim & "," _
                & xMax.ToString("#.######").Trim & "," _
                & pEnv.YMax.ToString("#.######").Trim

            'query webservice, parse response, and populate database
            Try
                Dim reader As System.Xml.XmlReader
                reader = System.Xml.XmlReader.Create(WS_URL_partition)
                While (reader.Read())

                    'get to a site node
                    reader.MoveToContent()
                    If reader.Name <> "site" Then Continue While

                    'Lat and Lng are actually stored as floating real number in the database, so truncate to 1st 10 characters
                    Dim SiteLat As String = reader.Item("lat")
                    Dim SiteLng As String = reader.Item("lng")
                    If Len(SiteLat) > 10 Then
                        SiteLat = Microsoft.VisualBasic.Left(SiteLat, 10)
                    End If
                    If Len(SiteLng) > 10 Then
                        SiteLng = Microsoft.VisualBasic.Left(SiteLng, 10)
                    End If

                    'create the feature inside an edit operation
                    MyWorkspaceEdit.StartEditOperation()

                    'create new feature and get field indeces
                    'NOTE: since there may be no features, getting the indeces needs to be done after one is created.
                    '      so this cannot go outside the loop
                    pFeature = NWIS_FeatureClass.CreateFeature()
                    Dim IndexSiteNo As Long = pFeature.Fields.FindFieldByAliasName("Site Number")
                    Dim IndexSiteName As Long = pFeature.Fields.FindFieldByAliasName("Station Name")
                    Dim IndexSiteCat As Long = pFeature.Fields.FindFieldByAliasName("Site Type Code")
                    Dim IndexSiteLat As Long = pFeature.Fields.FindFieldByAliasName("Latitude")
                    Dim IndexSiteLng As Long = pFeature.Fields.FindFieldByAliasName("Longitude")
                    Dim IndexSiteAgency As Long = pFeature.Fields.FindFieldByAliasName("Agency Code")
                    Dim IndexSiteURL As Long = pFeature.Fields.FindFieldByAliasName("NWIS Web URL")

                    'assign XML attribute values to the attribute fields
                    pFeature.Value(IndexSiteNo) = reader.Item("sno")
                    pFeature.Value(IndexSiteName) = reader.Item("sna")
                    pFeature.Value(IndexSiteAgency) = reader.Item("agc")
                    pFeature.Value(IndexSiteCat) = reader.Item("cat")
                    pFeature.Value(IndexSiteLat) = SiteLat
                    pFeature.Value(IndexSiteLng) = SiteLng
                    pFeature.Value(IndexSiteURL) = "http://waterdata.usgs.gov/nwis/inventory?agency_code=" & reader.Item("agc") & "&site_no=" & reader.Item("sno")

                    'update geometry
                    Dim pPoint As IPoint = New ESRI.ArcGIS.Geometry.Point
                    pPoint.X = Convert.ToDouble(SiteLng)
                    pPoint.Y = Convert.ToDouble(SiteLat)

                    'the site file web service returns nad83 decimal degrees so we have 
                    'to save that in order to project the sites to the user's map projection
                    pPoint.SpatialReference = pSpatialReferenceEnv.CreateGeographicCoordinateSystem(esriSRGeoCSType.esriSRGeoCS_NAD1983)

                    'project to the map projection of the current map
                    pPoint.Project(pMxDoc.FocusMap.SpatialReference)

                    'assign the point to the feature's geometry field
                    pFeature.Shape = pPoint

                    'store the record
                    pFeature.Store()

                    'done with this editing operation
                    MyWorkspaceEdit.StopEditOperation()

                    'update counter
                    iSites = iSites + 1

                    'update status
                    lblDocStatus.Text = "Site " & reader.Item("sno") & " added (" & iSites.ToString & " of " & nSites.ToString & ")"
                    lblDocStatus.Refresh() 'repaint status label to update
                    If prgDoc.Value < 100 Then
                        prgDoc.Value = 100 * iSites / nSites
                    End If

                End While
                reader.Close()

            Catch
                'do nothing - the webservice returns "404 ERROR: No sites found matching this request (caas01)" if no sites

            End Try

            'reset xMin to goto next partition
            xMin = xMax
        Next i

        'stop editing
        MyWorkspaceEdit.StopEditing(True)

        'update map
        pMxDoc.ActiveView.Refresh()

        'update log
        ProcSQL(pSource, "Insert INTO Snapshot_DL_Date (Snapshot_Query, Snapshot_Date) VALUES('Sites', #" & Now() & "#)")

        'stop stopwatch
        stopwatch.Stop()

        'give message
        MessageBox.Show( _
            "Site Information request complete." & vbCrLf _
            & vbCrLf _
            & iSites.ToString & " site(s) matching the selection criteria were retrieved within the current map extent." & vbCrLf _
            & vbCrLf _
            & vbCrLf _
            & "Elapsed time: " & stopwatch.Elapsed.Days.ToString & " days " & stopwatch.Elapsed.Hours.ToString & " hours " & stopwatch.Elapsed.Minutes.ToString & " minutes " & stopwatch.Elapsed.Seconds.ToString & " seconds", _
            "Snapshot", _
            MessageBoxButtons.OK, _
            MessageBoxIcon.Information, _
            MessageBoxDefaultButton.Button1)

        ''THIS WILL DISABLE TABS FOR DATA TYPES THAT WERE NOT CHECKED - DON'T DO THIS
        ''enable / disable tabs based on the DataType checkboxes
        'If chkSitesDataTypeAll.Checked Or chkSitesDataTypeQW.Checked Then
        '    QW.Enabled = True
        'Else
        '    QW.Enabled = False
        'End If
        'If chkSitesDataTypeAll.Checked Or chkSitesDataTypeDV.Checked Then
        '    DV.Enabled = True
        'Else
        '    DV.Enabled = False
        'End If
        'If chkSitesDataTypeAll.Checked Or chkSitesDataTypeUV.Checked Then
        '    UV.Enabled = True
        'Else
        '    UV.Enabled = False
        'End If
        'tctrlSnapshot.Refresh()

        ExitCleanUp()
    End Sub 'SitesGet


    '==========================================================
    '==========================================================
    Public Sub QWGet()

        'no additional user parameter checking / validation required for this sub

        'start the progress bar and disable Snapshot tabs
        prgDoc.Value = 1
        tctrlSnapshot.Enabled = False

        '-----------------------------------------
        'test for an internet connection to the serivce
        lblDocStatus.Text = "Checking web service availablity"
        lblDocStatus.Refresh()

        'this is interactive and allow retrys
        If TestWebConnection(strQWBaseURL) = False Then
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'the "NWIS Sites" layer is required for this tool - make sure the current map has that layer.
        lblDocStatus.Text = "Checking for NWIS Sites layer"
        lblDocStatus.Refresh()

        'reference IMxDocument and cast to the ArcMap Document
        Dim pMxDoc As IMxDocument = My.ArcMap.Document

        'reference IMap and cast to the current focus map
        Dim pMap As IMap = pMxDoc.FocusMap

        'search for "NWIS Sites" layer
        Dim NWIS_FeatureLayer As IFeatureLayer = Nothing
        Dim pEnumLayer As IEnumLayer = pMap.Layers(Nothing, True)
        pEnumLayer.Reset()
        Dim pLayer As ILayer = pEnumLayer.Next
        While Not pLayer Is Nothing 'loop though all layers of the current focus map
            If pLayer.Name = "NWIS Sites" Then 'found it
                NWIS_FeatureLayer = pLayer
                Exit While 'done
            End If
            pLayer = pEnumLayer.Next
        End While

        'if the "NWIS Sites" layer was not found then give message and exit
        If NWIS_FeatureLayer Is Nothing Then 'didn't find it
            MessageBox.Show( _
                "The 'NWIS Sites' layer could not be found in the table of contents of the active map." & vbCrLf _
                & vbCrLf _
                & "The Snapshot tool requires the 'NWIS Sites' layer for populating downloaded sites and defining site symbology. " _
                & "Please refer to the documentation for further information.", _
                "Snapshot", _
                MessageBoxButtons.OK, _
                MessageBoxIcon.Exclamation, _
                MessageBoxDefaultButton.Button1)
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'get the sites to query
        lblDocStatus.Text = "Determining sites to query"
        lblDocStatus.Refresh()

        'get the feature class
        Dim NWIS_FeatureClass As IFeatureClass = NWIS_FeatureLayer.FeatureClass

        'set feature cursor to all sites
        Dim pFeatCursor As IFeatureCursor
        Dim pQfilter As New QueryFilter
        Dim nSites As Integer = NWIS_FeatureClass.FeatureCount(pQfilter) 'count sites
        pFeatCursor = NWIS_FeatureClass.Search(pQfilter, False)

        'if selected sites only, do filter
        If rbQWAllSites.Checked = False Then 'use selected sites
            Dim pFeatureSelection As IFeatureSelection
            Dim pSelectionSet As ISelectionSet
            pFeatureSelection = NWIS_FeatureLayer
            pSelectionSet = pFeatureSelection.SelectionSet
            pSelectionSet.Search(Nothing, False, pFeatCursor)
            nSites = pSelectionSet.Count
        End If

        '-----------------------------------------
        'give message if no sites
        Dim strMsg As String
        If nSites <= 0 Then
            If rbQWAllSites.Checked Then
                strMsg = "There are no sites in the NWIS Sites layer." _
                         & vbCrLf _
                         & vbCrLf & "Please use the Snapshot Sites tab to retrieve sites and try again."
            Else
                strMsg = "You are requesting data for selected sites," _
                         & vbCrLf & "but there are no selected sites in the NWIS Sites layer." _
                         & vbCrLf _
                         & vbCrLf & "Please select some sites from the NWIS Sites layer and try again."
            End If
            MessageBox.Show( _
                strMsg, _
                "Snapshot", _
                MessageBoxButtons.OK, _
                MessageBoxIcon.Information, _
                MessageBoxDefaultButton.Button1)
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'get the dates, pcode, and stat to use in URL

        'dates
        Dim StartEndDateURL As String
        If chkQWAllDates.Checked Then 'full date range - do not include dates in URL
            StartEndDateURL = ""
        Else 'use specified dates: "&startDateLo=01-31-1870&startDateHi=01-31-2011"
            StartEndDateURL = "&startDateLo=" & dtpQWStartDate.Value.ToString("MM-dd-yyyy") & _
                              "&startDateHi=" & dtpQWEndDate.Value.ToString("MM-dd-yyyy")
        End If

        'Pcode
        Dim pCodeURL As String
        Dim strNpcode As String
        If chkQWAllPcodes.Checked Then 'full date range - do not include dates in URL
            pCodeURL = ""
            strNpcode = "ALL"
        Else 'use specified dates: "&startDateLo=01-31-1870&startDateHi=01-31-2011"
            'all listed in box with CrLF replaced with space (note: can't split on CrLf because 2 characters, and there might be empty lines)
            pCodeURL = System.Text.RegularExpressions.Regex.Replace(txtQWPcodes.Text, Environment.NewLine, " ", System.Text.RegularExpressions.RegexOptions.Compiled)

            'trim leading and trailing spaces and replace multiple spaces with a single ';'
            pCodeURL = System.Text.RegularExpressions.Regex.Replace(pCodeURL.Trim, "\s+", ";", System.Text.RegularExpressions.RegexOptions.Compiled)

            'split on the ';' to get a count
            Dim pcodes() As String = pCodeURL.Split(CChar(";"))
            strNpcode = (pcodes.GetUpperBound(0) + 1).ToString & " specified parameter codes" 'array indexing is 0-based

            'add URL search term
            pCodeURL = "&pCode=" & pCodeURL
        End If

        '-----------------------------------------
        'echo search criteria and confirm action
        'the search can take a while and we want the user to explicitly review what they are asking for
        strMsg = "Search Criteria:" & vbCrLf & vbCrLf
        If rbQWAllSites.Checked Then
            strMsg = strMsg & "Sites: ALL " & nSites.ToString & " site(s) in NWIS Sites Layer" & vbCrLf
        Else
            strMsg = strMsg & "Sites: " & nSites.ToString & " SELECTED site(s) in NWIS Sites Layer" & vbCrLf
        End If
        strMsg = strMsg & "Parameter Code: " & strNpcode & vbCrLf
        If chkQWAllDates.Checked Then
            strMsg = strMsg & "Date Range: All available" & vbCrLf
        Else
            strMsg = strMsg & "Date Range: " & dtpQWStartDate.Value.ToShortDateString & " though " & dtpQWEndDate.Value.ToShortDateString & " (" & (dtpQWEndDate.Value.Subtract(dtpQWStartDate.Value).Days + 1).ToString & " days)" & vbCrLf
        End If
        strMsg = strMsg & vbCrLf & "Retrieve Water Quality data matching these criteria?"
        strMsg = strMsg & vbCrLf & "Any previously retrieved Water Quality data will be overwritten."

        Dim strResp As String = MessageBox.Show( _
            strMsg, _
            "Snapshot", _
            MessageBoxButtons.YesNo, _
            MessageBoxIcon.Question, _
            MessageBoxDefaultButton.Button1)
        If strResp = DialogResult.No Then
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'ok - we are set to do a full uninterupted data query and upload
        lblDocStatus.Text = "Preparing database for writing"
        lblDocStatus.Refresh()

        'start a new Stopwatch (maybe put this at top as a global and start/stop same stopwatch).
        Dim stopwatch As Stopwatch = stopwatch.StartNew

        'Set the path and source file to the NWIS Sites layer workspace
        Dim NWIS_dataset As IDataset = NWIS_FeatureClass
        Dim MyWorkspace As IWorkspace = NWIS_dataset.Workspace
        Dim pSource As String = MyWorkspace.PathName
        Dim pPath As String = pSource
        For i As Integer = pPath.Length - 1 To 0 Step -1
            If pPath.Substring(i, 1) = "\" Then Exit For
            pPath = pPath.Substring(0, i)
        Next i

        'truncate the Activity and Result Tables
        TruncTables(pSource, "qw_result, qw_sample")

        'update logs
        'NOTE ON LOGS:
        '   not a good idea to acummulate junk files indefinitely, which is happening now.
        '   either overwrite a single file, or put this info in the Snapshot_DL_Date table
        Dim pErrorLog As String = pPath & "QW_Request_Summary_" & Now.ToString("MM-dd-yyyy-HHmm") & ".html"
        'Dim pErrorLog As String = pPath & "QW_Request_Summary.html" 'THIS WILL APPEND
        Dim pStartString As String = "<HTML><HEAD><TITLE>NWIS Water Quality Snapshot Report</TITLE></HEAD><BODY><H1>NWIS Water Quality Snapshot Report</H1><br>*Bad Request = Combination of Site and ParamCode is not found</P><br>Started: " & Now & "<h2>Web Request Errors</h2><table border='1'><tr><th>Site<th>ParamCode<th>URL<th>Response</tr>"
        WriteHtml(pStartString, pErrorLog)

        'open connection to DB:
        Dim oConn As OdbcConnection
        Dim comm As OdbcCommand = Nothing
        Dim connectionString As String = "Driver={Microsoft Access Driver (*.mdb)};" & _
            "Dbq=" & pSource & ";" & _
            "Uid=;" & _
            "Pwd="
        oConn = New OdbcConnection(connectionString)
        oConn.Open()

        'set counters
        Dim nTotSample As Integer = 0 'overall sample count
        Dim nTotResult As Integer = 0 'overall result count

        Dim iSitesQueried As Integer = 0
        Dim iSitesWithData As Integer = 0
        Dim iSitesOK As Integer = 0

        'goto 1st feature
        Dim pFeature As IFeature = pFeatCursor.NextFeature

        'loop over features (sites)
        Dim WResponse As HttpWebResponse = Nothing
        Do While pFeature IsNot Nothing
            'get site number
            Dim IndexSiteNo As Long = pFeature.Fields.FindFieldByAliasName("Site Number")
            Dim currSiteNo As String = Microsoft.VisualBasic.Trim(pFeature.Value(IndexSiteNo))

            'update status
            lblDocStatus.Text = "Site " & currSiteNo & ": Querying web service"
            lblDocStatus.Refresh()
            iSitesQueried = iSitesQueried + 1
            If prgDoc.Value < 100 Then
                prgDoc.Value = 100 * iSitesQueried / nSites
            End If

            'set result counter for this site
            Dim nCurrResult As Integer = 0

            Try
                'set up request for this site
                Dim WS_URL As String = strQWBaseURL & "?siteid=USGS-" & currSiteNo & pCodeURL & StartEndDateURL & "&mimeType=xml"
                Dim WReq As HttpWebRequest = DirectCast(WebRequest.Create(WS_URL), HttpWebRequest)
                WReq.KeepAlive = False
                WReq.Timeout = 30 * 1000 '* 1000 '!!! ORIG VALUE: 15 * 1000 = 15 seconds

                'get the response and stream it to the reader
                WResponse = DirectCast(WReq.GetResponse(), HttpWebResponse)

                'see if we have a response to parse out
                If WReq.HaveResponse = False OrElse WResponse Is Nothing Then
                    WResponse.Close()
                    Continue Do 'goto next site
                End If

                'reset progress
                lblDocStatus.Text = "Site " & currSiteNo & ": Parsing response"
                lblDocStatus.Refresh()

                'connect reader to response stream
                Dim reader As System.Xml.XmlReader = System.Xml.XmlReader.Create(WResponse.GetResponseStream())

                '-----------------------------------------------
                'initialize qw_sample table values:

                '...Activity
                Dim result_count As String = "" 'ResultCount -- I am doing my own count, and this is not usually populated.
                Dim MY_result_count As Integer = 0 'counts number of result blocks in each Activity block - used instead of result_count

                '...Activity ==> ActivityDescription
                Dim siteno As String = "" 'MonitoringLocationIdentifier
                Dim site_no_xml As String = "" 'MonitoringLocationIdentifier
                Dim record_no_xml As String = "" 'ActivityIdentifier
                Dim samp_type_nm As String = "" 'ActivityTypeCode
                Dim medium_nm As String = "" 'ActivityMediaName
                Dim medium_sub_nm As String = "" 'ActivityMediaSubdivisionName
                Dim sample_start_dt As String = "" 'ActivityStartDate
                Dim sample_end_dt As String = "" 'ActivityEndDate
                Dim samp_rel_depth_nm As String = "" 'ActivityRelativeDepthName
                Dim samp_depth_ref_tx As String = "" 'ActivityDepthAltitudeReferencePointText
                Dim project_cd As String = "" 'ProjectIdentifier
                Dim coll_ent_nm As String = "" 'ActivityConductingOrganizationText
                Dim sample_cm_tx As String = "" 'ActivityCommentText
                Dim aqfr_nm As String = "" 'SampleAquifer
                Dim hyd_cond_nm As String = "" 'HydrologicCondition
                Dim hyd_event_nm As String = "" 'HydrologicEvent

                '...Activity ==> ActivityDescription ==> ActivityStartTime
                Dim sample_start_time As String = "" 'Time
                Dim sample_start_tz As String = "" 'TimeZoneCode

                '-----------------------------------------------
                'initialize qw_result table values:

                '...Activity ==> Result ==> ResultDescription
                Dim dat_log_ln_nm As String = "" 'DataLoggerLineName
                Dim remark_nm As String = "" 'ResultDetectionConditionText
                Dim parm_alias_nm As String = "" 'CharacteristicName
                Dim result_meth_spec_nm As String = "" 'MethodSpeciationName
                Dim parm_frac_tx As String = "" 'ResultSampleFractionText
                Dim dqi_name As String = "" 'ResultStatusIdentifier
                Dim parm_stat_tx As String = "" 'StatisticalBaseCode
                Dim result_val_tp As String = "" 'ResultValueTypeName
                Dim parm_wt_tx As String = "" 'ResultWeightBasisText
                Dim parm_tm_tx As String = "" 'ResultTimeBasisText
                Dim parm_temp_tx As String = "" 'ResultTemperatureBasisText
                Dim parm_size_tx As String = "" 'ResultParticleSizeBasisText
                Dim result_lab_cm_tx As String = "" 'ResultCommentText
                Dim result_depth_ref_tx As String = "" 'ResultDepthAltitudeReferencePointText
                Dim parm_cd As String = "" 'USGSPCode

                '...Activity ==> Result ==> ResultDescription ==> ResultMeasure
                Dim result_va As String = "" 'ResultMeasureValue
                Dim parm_unt_tx As String = "" 'MeasureUnitCode
                Dim meas_qual_cd As String = "" 'MeasureQualifierCode

                '-----------------------------------------------
                'loop though XML
                While (reader.Read()) 'all XML

                    'Activity
                    If reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "Activity" Then
                        'MsgBox("IN Activity")

                        'read Activity block until end
                        While (reader.Read()) 'Activity

                            'see if end of Activity block
                            If reader.NodeType = XmlNodeType.EndElement AndAlso reader.Name.ToString = "Activity" Then
                                'MsgBox("EXIT Activity")

                                ''DEBUG:
                                'If Not record_no_xml = "" Then
                                '    MsgBox( _
                                '        "siteno: MonitoringLocationIdentifier = " & siteno & vbCrLf & _
                                '        "site_no_xml: MonitoringLocationIdentifier = " & site_no_xml & vbCrLf & _
                                '        "record_no_xml: ActivityIdentifier = " & record_no_xml & vbCrLf & _
                                '        "samp_type_nm: ActivityTypeCode = " & samp_type_nm & vbCrLf & _
                                '        "medium_nm: ActivityMediaName = " & medium_nm & vbCrLf & _
                                '        "medium_sub_nm: ActivityMediaSubdivisionName = " & medium_sub_nm & vbCrLf & _
                                '        "sample_start_dt: ActivityStartDate = " & sample_start_dt & vbCrLf & _
                                '        "sample_end_dt: ActivityEndDate = " & sample_end_dt & vbCrLf & _
                                '        "samp_rel_depth_nm: ActivityRelativeDepthName = " & samp_rel_depth_nm & vbCrLf & _
                                '        "samp_depth_ref_tx: ActivityDepthAltitudeReferencePointText = " & samp_depth_ref_tx & vbCrLf & _
                                '        "project_cd: ProjectIdentifier = " & project_cd & vbCrLf & _
                                '        "coll_ent_nm: ActivityConductingOrganizationText = " & coll_ent_nm & vbCrLf & _
                                '        "sample_cm_tx: ActivityCommentText = " & sample_cm_tx & vbCrLf & _
                                '        "aqfr_nm & aqfr_nm: SampleAquifer = " & vbCrLf & _
                                '        "hyd_cond_nm: HydrologicCondition = " & hyd_cond_nm & vbCrLf & _
                                '        "hyd_event_nm: HydrologicEvent = " & hyd_event_nm & vbCrLf & _
                                '        vbCrLf & _
                                '        "sample_start_time: Time = " & sample_start_time & vbCrLf & _
                                '        "sample_start_tz: TimeZoneCode = " & sample_start_tz & vbCrLf & _
                                '        vbCrLf & _
                                '        "MY_result_count = " & MY_result_count.ToString & vbCrLf & _
                                '        "")
                                'End If

                                'after reading Activity block, write values to qw_sample table

                                'see if conditions are met for DB write:
                                ' - need a record_no_xml (required for cross-referencing sample / result tables)
                                ' - need some results (eg: do not output sample info if no related results)
                                Dim blnWriteDB = True
                                If record_no_xml = "" Or _
                                   MY_result_count <= 0 Then
                                    blnWriteDB = False
                                End If

                                'convert string values for non-string DB data types
                                Try
                                    sample_start_dt = CDate(sample_start_dt)
                                Catch 'can't cast type
                                    sample_start_dt = System.DateTime.MinValue.ToString '!!!!!!!!!!!! SET NULL ????
                                End Try

                                'only write if above OK
                                If blnWriteDB Then
                                    Dim pSQl As String = "INSERT INTO qw_sample(" _
                                        & "siteno," _
                                        & "site_no_xml," _
                                        & "record_no_xml," _
                                        & "samp_type_nm," _
                                        & "medium_nm," _
                                        & "medium_sub_nm," _
                                        & "sample_start_dt," _
                                        & "sample_start_time," _
                                        & "sample_start_tz," _
                                        & "sample_end_dt," _
                                        & "samp_rel_depth_nm," _
                                        & "samp_depth_ref_tx," _
                                        & "project_cd," _
                                        & "coll_ent_nm," _
                                        & "sample_cm_tx," _
                                        & "aqfr_nm," _
                                        & "hyd_cond_nm," _
                                        & "hyd_event_nm," _
                                        & "result_count) " _
                                     & "VALUES( " _
                                        & "'" & siteno.Replace("'", "") & "'," _
                                        & "'" & site_no_xml.Replace("'", "") & "'," _
                                        & "'" & record_no_xml.Replace("'", "") & "'," _
                                        & "'" & samp_type_nm.Replace("'", "") & "'," _
                                        & "'" & medium_nm.Replace("'", "") & "'," _
                                        & "'" & medium_sub_nm.Replace("'", "") & "'," _
                                        & "#" & sample_start_dt & "#," _
                                        & "'" & sample_start_time.Replace("'", "") & "'," _
                                        & "'" & sample_start_tz.Replace("'", "") & "'," _
                                        & "'" & sample_end_dt.Replace("'", "") & "'," _
                                        & "'" & samp_rel_depth_nm.Replace("'", "") & "'," _
                                        & "'" & samp_depth_ref_tx.Replace("'", "") & "'," _
                                        & "'" & project_cd.Replace("'", "") & "'," _
                                        & "'" & coll_ent_nm.Replace("'", "") & "'," _
                                        & "'" & sample_cm_tx.Replace("'", "") & "'," _
                                        & "'" & aqfr_nm.Replace("'", "") & "'," _
                                        & "'" & hyd_cond_nm.Replace("'", "") & "'," _
                                        & "'" & hyd_event_nm.Replace("'", "") & "'," _
                                        & "'" & MY_result_count.ToString & "')"
                                    comm = New OdbcCommand(pSQl, oConn)
                                    comm.ExecuteNonQuery()
                                    comm.Dispose()
                                End If

                                'reset all values written for next sample:
                                '...Activity
                                result_count = "" 'ResultCount  <== NEED THIS ??? I am doing my own count, and this is not usually populated.
                                MY_result_count = 0 'counts number of result blocks in each Activity block

                                '...Activity ==> ActivityDescription
                                siteno = "" 'MonitoringLocationIdentifier
                                site_no_xml = "" 'MonitoringLocationIdentifier
                                record_no_xml = "" 'ActivityIdentifier
                                samp_type_nm = "" 'ActivityTypeCode
                                medium_nm = "" 'ActivityMediaName
                                medium_sub_nm = "" 'ActivityMediaSubdivisionName
                                sample_start_dt = "" 'ActivityStartDate
                                sample_end_dt = "" 'ActivityEndDate
                                samp_rel_depth_nm = "" 'ActivityRelativeDepthName
                                samp_depth_ref_tx = "" 'ActivityDepthAltitudeReferencePointText
                                project_cd = "" 'ProjectIdentifier
                                coll_ent_nm = "" 'ActivityConductingOrganizationText
                                sample_cm_tx = "" 'ActivityCommentText
                                aqfr_nm = "" 'SampleAquifer
                                hyd_cond_nm = "" 'HydrologicCondition
                                hyd_event_nm = "" 'HydrologicEvent

                                '...Activity ==> ActivityDescription ==> ActivityStartTime
                                sample_start_time = "" 'Time
                                sample_start_tz = "" 'TimeZoneCode

                                'increment overall sample count
                                nTotSample = nTotSample + 1

                                Exit While
                            End If

                            'get needed data from block
                            If reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultCount" Then
                                result_count = reader.ReadString 'Note: using MY_result_count instead of this
                            Else
                                'do nothing
                            End If

                            '-----------------------------------------------
                            'Activity ==> ActivityDescription
                            '
                            '<ActivityDescription>
                            '   <ActivityIdentifier>sun1ast.01.00600158</ActivityIdentifier> 
                            '   <ActivityTypeCode>Sample-Routine</ActivityTypeCode> 
                            '   <ActivityMediaName>Water</ActivityMediaName> 
                            '   <ActivityMediaSubdivisionName>Surface Water</ActivityMediaSubdivisionName> 
                            '   <ActivityStartDate>2006-01-25</ActivityStartDate> 
                            '   <ProjectIdentifier>Routine</ProjectIdentifier> 
                            '   <ActivityConductingOrganizationText>U.S. Geological Survey-Water Resources Discipline</ActivityConductingOrganizationText> 
                            '   <MonitoringLocationIdentifier>USGS-07300000</MonitoringLocationIdentifier> 
                            '   <HydrologicCondition>Stable, normal stage</HydrologicCondition> 
                            '   <HydrologicEvent>Routine sample</HydrologicEvent> 
                            '   <ActivityStartTime>
                            '       <Time>10:30:00</Time> 
                            '       <TimeZoneCode>CST</TimeZoneCode> 
                            '   </ActivityStartTime>
                            '</ActivityDescription>
                            '
                            If reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityDescription" Then
                                'MsgBox("IN Activity ==> ActivityDescription")

                                'read ActivityDescription block until end
                                While (reader.Read()) 'Activity ==> ActivityDescription

                                    'see if at end of block
                                    If reader.NodeType = XmlNodeType.EndElement AndAlso reader.Name.ToString = "ActivityDescription" Then
                                        'MsgBox("EXIT Activity ==> ActivityDescription")
                                        Exit While
                                    End If

                                    'get needed data from block
                                    If reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "MonitoringLocationIdentifier" Then
                                        site_no_xml = reader.ReadString
                                        siteno = site_no_xml.Replace("USGS-", "") 'strip USGS- if present
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityIdentifier" Then
                                        record_no_xml = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityTypeCode" Then
                                        samp_type_nm = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityMediaName" Then
                                        medium_nm = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityMediaSubdivisionName" Then
                                        medium_sub_nm = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityStartDate" Then
                                        sample_start_dt = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityEndDate" Then
                                        sample_end_dt = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityRelativeDepthName" Then
                                        samp_rel_depth_nm = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityDepthAltitudeReferencePointText" Then
                                        samp_depth_ref_tx = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ProjectIdentifier" Then
                                        project_cd = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityConductingOrganizationText" Then
                                        coll_ent_nm = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityCommentText" Then
                                        sample_cm_tx = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "SampleAquifer" Then
                                        aqfr_nm = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "HydrologicCondition" Then
                                        hyd_cond_nm = reader.ReadString
                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "HydrologicEvent" Then
                                        hyd_event_nm = reader.ReadString
                                    Else
                                        'do nothing
                                    End If

                                    'Activity ==> ActivityDescription ==> ActivityStartTime
                                    If reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ActivityStartTime" Then
                                        'MsgBox("IN Activity ==> ActivityDescription ==> ActivityStartTime")

                                        'read ActivityStartTime block until end
                                        While (reader.Read()) 'Activity ==> ActivityDescription ==> ActivityStartTime

                                            'see if at end of block
                                            If reader.NodeType = XmlNodeType.EndElement AndAlso reader.Name.ToString = "ActivityStartTime" Then
                                                'MsgBox("EXIT Activity ==> ActivityDescription ==> ActivityStartTime")
                                                Exit While
                                            End If

                                            'get needed data from block
                                            If reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "Time" Then
                                                sample_start_time = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "TimeZoneCode" Then
                                                sample_start_tz = reader.ReadString
                                            Else
                                                'do nothing
                                            End If

                                        End While 'AActivity ==> ActivityDescription ==> ActivityStartTime
                                    End If 'Activity ==> ActivityDescription ==> ActivityStartTime

                                End While 'AActivity ==> ActivityDescription
                            End If 'Activity ==> ActivityDescription

                            '-----------------------------------------------
                            'Activity ==> Result
                            '
                            '<Result>
                            '   <ResultDescription>
                            '       <CharacteristicName>Temperature, water</CharacteristicName> 
                            '       <ResultMeasure>
                            '           <ResultMeasureValue>11.2</ResultMeasureValue> 
                            '           <MeasureUnitCode>deg C</MeasureUnitCode> 
                            '       </ResultMeasure>
                            '       <ResultStatusIdentifier>Accepted</ResultStatusIdentifier> 
                            '       <ResultValueTypeName>Actual</ResultValueTypeName> 
                            '       <USGSPCode>00010</USGSPCode> 
                            '   </ResultDescription>
                            '</Result>
                            '
                            If reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "Result" Then
                                'MsgBox("IN Activity ==> Result")

                                'cannot output anything if we do not have a record_no_xml, so bail in this case.
                                If record_no_xml = "" Then Continue While 'Activity read loop

                                'read Result block until end
                                While (reader.Read()) 'Activity ==> Result

                                    'see if at end of block
                                    If reader.NodeType = XmlNodeType.EndElement AndAlso reader.Name.ToString = "Result" Then
                                        'MsgBox("EXIT Activity ==> Result")

                                        ''DEBUG:
                                        'MsgBox( _
                                        '    "dat_log_ln_nm: DataLoggerLineName = " & dat_log_ln_nm & vbCrLf & _
                                        '    "remark_nm: ResultDetectionConditionText = " & remark_nm & vbCrLf & _
                                        '    "parm_alias_nm: CharacteristicName = " & parm_alias_nm & vbCrLf & _
                                        '    "result_meth_spec_nm: MethodSpeciationName = " & result_meth_spec_nm & vbCrLf & _
                                        '    "parm_frac_tx: ResultSampleFractionText = " & parm_frac_tx & vbCrLf & _
                                        '    "dqi_name: ResultStatusIdentifier = " & dqi_name & vbCrLf & _
                                        '    "parm_stat_tx: StatisticalBaseCode = " & parm_stat_tx & vbCrLf & _
                                        '    "result_val_tp: ResultValueTypeName = " & result_val_tp & vbCrLf & _
                                        '    "parm_wt_tx: ResultWeightBasisText = " & parm_wt_tx & vbCrLf & _
                                        '    "parm_tm_tx: ResultTimeBasisText = " & parm_tm_tx & vbCrLf & _
                                        '    "parm_temp_tx: ResultTemperatureBasisText = " & parm_temp_tx & vbCrLf & _
                                        '    "parm_size_tx: ResultParticleSizeBasisText = " & parm_size_tx & vbCrLf & _
                                        '    "result_lab_cm_tx: ResultCommentText = " & result_lab_cm_tx & vbCrLf & _
                                        '    "result_depth_ref_tx: ResultDepthAltitudeReferencePointText = " & result_depth_ref_tx & vbCrLf & _
                                        '    "parm_cd: USGSPCode = " & parm_cd & vbCrLf & _
                                        '    vbCrLf & _
                                        '    "result_va: ResultMeasureValue = " & result_va & vbCrLf & _
                                        '    "parm_unt_tx: MeasureUnitCode = " & parm_unt_tx & vbCrLf & _
                                        '    "meas_qual_cd: MeasureQualifierCode = " & meas_qual_cd & vbCrLf & _
                                        '    "")

                                        'after reading Result block, write values to qw_result table

                                        'see if conditions are met for DB write:
                                        ' - need a record_no_xml (required for cross-referencing sample / result tables)
                                        Dim blnWriteDB = True
                                        If record_no_xml = "" Then 'the Result block should be skipped if record_no_xml="", but check here anyway
                                            blnWriteDB = False
                                        End If

                                        'convert string values for non-string DB data types
                                        Dim dbl_result_va As Double
                                        If result_va = "" Then
                                            dbl_result_va = -99999.999 'val not available - set to null value
                                        Else
                                            Try
                                                dbl_result_va = CDbl(result_va)
                                            Catch 'can't cast type
                                                dbl_result_va = -99999.999 '!!! THIS IS A BAD WAY TO SPECIFY NULL IN DB
                                            End Try
                                        End If

                                        'only write if above OK
                                        If blnWriteDB Then
                                            Dim pSQl As String = "INSERT INTO qw_result(" _
                                                & "dat_log_ln_nm," _
                                                & "remark_nm," _
                                                & "parm_alias_nm," _
                                                & "result_meth_spec_nm," _
                                                & "parm_frac_tx," _
                                                & "dqi_name," _
                                                & "parm_stat_tx," _
                                                & "result_val_tp," _
                                                & "parm_wt_tx," _
                                                & "parm_tm_tx," _
                                                & "parm_temp_tx," _
                                                & "parm_size_tx," _
                                                & "result_lab_cm_tx," _
                                                & "result_depth_ref_tx," _
                                                & "parm_cd," _
                                                & "result_va," _
                                                & "parm_unt_tx," _
                                                & "meas_qual_cd," _
                                                & "record_no_xml) " _
                                             & "VALUES( " _
                                                & "'" & dat_log_ln_nm.Replace("'", "") & "'," _
                                                & "'" & remark_nm.Replace("'", "") & "'," _
                                                & "'" & parm_alias_nm.Replace("'", "") & "'," _
                                                & "'" & result_meth_spec_nm.Replace("'", "") & "'," _
                                                & "'" & parm_frac_tx.Replace("'", "") & "'," _
                                                & "'" & dqi_name.Replace("'", "") & "'," _
                                                & "'" & parm_stat_tx.Replace("'", "") & "'," _
                                                & "'" & result_val_tp.Replace("'", "") & "'," _
                                                & "'" & parm_wt_tx.Replace("'", "") & "'," _
                                                & "'" & parm_tm_tx.Replace("'", "") & "'," _
                                                & "'" & parm_temp_tx.Replace("'", "") & "'," _
                                                & "'" & parm_size_tx.Replace("'", "") & "'," _
                                                & "'" & result_lab_cm_tx.Replace("'", "") & "'," _
                                                & "'" & result_depth_ref_tx.Replace("'", "") & "'," _
                                                & "'" & parm_cd.Replace("'", "") & "'," _
                                                & dbl_result_va & "," _
                                                & "'" & parm_unt_tx.Replace("'", "") & "'," _
                                                & "'" & meas_qual_cd.Replace("'", "") & "'," _
                                                & "'" & record_no_xml.Replace("'", "") & "')"
                                            comm = New OdbcCommand(pSQl, oConn)
                                            comm.ExecuteNonQuery()
                                            comm.Dispose()
                                        End If

                                        'reset all values written for next result:

                                        '...Activity ==> Result ==> ResultDescription
                                        dat_log_ln_nm = "" 'DataLoggerLineName
                                        remark_nm = "" 'ResultDetectionConditionText
                                        parm_alias_nm = "" 'CharacteristicName
                                        result_meth_spec_nm = "" 'MethodSpeciationName
                                        parm_frac_tx = "" 'ResultSampleFractionText
                                        dqi_name = "" 'ResultStatusIdentifier
                                        parm_stat_tx = "" 'StatisticalBaseCode
                                        result_val_tp = "" 'ResultValueTypeName
                                        parm_wt_tx = "" 'ResultWeightBasisText
                                        parm_tm_tx = "" 'ResultTimeBasisText
                                        parm_temp_tx = "" 'ResultTemperatureBasisText
                                        parm_size_tx = "" 'ResultParticleSizeBasisText
                                        result_lab_cm_tx = "" 'ResultCommentText
                                        result_depth_ref_tx = "" 'ResultDepthAltitudeReferencePointText
                                        parm_cd = "" 'USGSPCode

                                        '...Activity ==> Result ==> ResultDescription ==> ResultMeasure
                                        result_va = "" 'ResultMeasureValue
                                        parm_unt_tx = "" 'MeasureUnitCode
                                        meas_qual_cd = "" 'MeasureQualifierCode

                                        'increment overall and individual result counts
                                        nTotResult = nTotResult + 1
                                        nCurrResult = nCurrResult + 1

                                        'increment result count for this sample (activity block)
                                        MY_result_count = MY_result_count + 1

                                        Exit While
                                    End If

                                    'get needed data from block
                                    '(there is none)

                                    'Activity ==> Result ==> ResultDescription
                                    If reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultDescription" Then
                                        'MsgBox("IN Activity ==> Result ==> ResultDescription")

                                        'read ResultDescription block until end
                                        While (reader.Read()) 'Activity ==> Result ==> ResultDescription

                                            'see if at end of block
                                            If reader.NodeType = XmlNodeType.EndElement AndAlso reader.Name.ToString = "ResultDescription" Then
                                                'MsgBox("EXIT Activity ==> Result ==> ResultDescription")
                                                Exit While
                                            End If

                                            'get needed data from block
                                            If reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "DataLoggerLineName" Then
                                                dat_log_ln_nm = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultDetectionConditionText" Then
                                                remark_nm = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "CharacteristicName" Then
                                                parm_alias_nm = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "MethodSpeciationName" Then
                                                result_meth_spec_nm = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultSampleFractionText" Then
                                                parm_frac_tx = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultStatusIdentifier" Then
                                                dqi_name = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "StatisticalBaseCode" Then
                                                parm_stat_tx = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultValueTypeName" Then
                                                result_val_tp = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultWeightBasisText" Then
                                                parm_wt_tx = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultTimeBasisText" Then
                                                parm_tm_tx = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultTemperatureBasisText" Then
                                                parm_temp_tx = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultParticleSizeBasisText" Then
                                                parm_size_tx = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultCommentText" Then
                                                result_lab_cm_tx = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultDepthAltitudeReferencePointText" Then
                                                result_depth_ref_tx = reader.ReadString
                                            ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "USGSPCode" Then
                                                parm_cd = reader.ReadString
                                            Else
                                                'do nothing
                                            End If

                                            'Activity ==> Result ==> ResultDescription ==> ResultMeasure
                                            If reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultMeasure" Then
                                                'MsgBox("IN Activity ==> Result ==> ResultDescription ==> ResultMeasure")

                                                'read ResultMeasure block until end
                                                While (reader.Read()) 'Activity ==> Result ==> ResultDescription ==> ResultMeasure

                                                    'see if at end of block
                                                    If reader.NodeType = XmlNodeType.EndElement AndAlso reader.Name.ToString = "ResultMeasure" Then
                                                        'MsgBox("EXIT Activity ==> Result ==> ResultDescription ==> ResultMeasure")
                                                        Exit While
                                                    End If

                                                    'get needed data from block
                                                    If reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "ResultMeasureValue" Then
                                                        result_va = reader.ReadString
                                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "MeasureUnitCode" Then
                                                        parm_unt_tx = reader.ReadString
                                                    ElseIf reader.NodeType = XmlNodeType.Element AndAlso reader.Name.ToString = "MeasureQualifierCode" Then
                                                        meas_qual_cd = reader.ReadString
                                                    Else
                                                        'do nothing
                                                    End If

                                                End While 'Activity ==> Result ==> ResultDescription ==> ResultMeasure
                                            End If 'Activity ==> Result ==> ResultDescription ==> ResultMeasure

                                        End While 'Activity ==> Result ==> ResultDescription
                                    End If 'Activity ==> Result ==> ResultDescription

                                End While 'Activity ==> Result
                            End If 'Activity ==> Result

                        End While 'Activity
                    End If 'Activity

                End While 'all XML

                'close connection and XML reader
                WResponse.Close()
                reader.Close()

                'update log
                WriteHtml("<tr><td><b>" & siteno & "</b><td>" & pCodeURL & "<td><a href='" & WS_URL & "'>Request</a><td>Good Data</tr>", pErrorLog)

                'increment OK
                iSitesOK = iSitesOK + 1

                'increment overall SitesWithData if this site had some data
                If nCurrResult > 0 Then iSitesWithData = iSitesWithData + 1

            Catch ex As WebException
                If ex.Response IsNot Nothing Then
                    Dim errorResponse As HttpWebResponse = Nothing
                    Try
                        errorResponse = DirectCast(ex.Response, HttpWebResponse)
                        WriteHtml("<tr><td><b>" & currSiteNo & "</b><td>" & pCodeURL & "<td><a href='" & "" & "'>Request</a><td>" & errorResponse.StatusDescription.ToString & "</tr>", pErrorLog)
                    Finally
                        If Not errorResponse Is Nothing Then errorResponse.Close()
                    End Try
                End If

            Finally
                If Not WResponse Is Nothing Then WResponse.Close()

            End Try

            'flush event queue
            Application.DoEvents()

            'goto next feature (site)
            pFeature = pFeatCursor.NextFeature

        Loop

        'close DB connection
        oConn.Close()
        If comm IsNot Nothing Then comm.Dispose()
        oConn.Dispose()

        'update logs
        WriteHtml("</table>", pErrorLog)
        GetFinalSampleStats(pSource, pErrorLog)
        WriteHtml("<P>Completed: " & Now & "</BODY></HTML>", pErrorLog)
        ProcSQL(pSource, "Insert INTO Snapshot_DL_Date (Snapshot_Query, Snapshot_Date) VALUES('Water Quality', #" & Now() & "#)")

        'refresh the map
        pMxDoc.ActiveView.Refresh()

        'stop stopwatch
        stopwatch.Stop()

        'give message
        MessageBox.Show( _
            "Water Quality request complete." & vbCrLf _
            & vbCrLf _
            & iSitesQueried.ToString & " site(s) queried." & vbCrLf _
            & (iSitesQueried - iSitesOK).ToString & " site(s) had no web service response or request timeout." & vbCrLf _
            & iSitesWithData.ToString & " site(s) had data successfully retrieved for the specified parameter(s) and time period (" & System.Math.Round(100.0 * iSitesWithData / iSitesQueried).ToString & "%)." & vbCrLf _
            & vbCrLf _
            & vbCrLf & "To view download report, open: " & pErrorLog & vbCrLf _
            & vbCrLf _
            & vbCrLf _
            & "Total number of samples retrieved: " & nTotSample.ToString & vbCrLf _
            & "Total number of results retrieved: " & nTotResult.ToString & vbCrLf _
            & "Elapsed time: " & stopwatch.Elapsed.Days.ToString & " days " & stopwatch.Elapsed.Hours.ToString & " hours " & stopwatch.Elapsed.Minutes.ToString & " minutes " & stopwatch.Elapsed.Seconds.ToString & " seconds", _
            "Snapshot", _
            MessageBoxButtons.OK, _
            MessageBoxIcon.Information, _
            MessageBoxDefaultButton.Button1)

        'cleanup
        ExitCleanUp()

    End Sub 'QWGet


    '==========================================================
    '==========================================================
    Public Sub DVGet()
        'retrieve Daily Value data using current settings

        'no additional user parameter checking / validation required for this sub

        'start the progress bar and disable Snapshot tabs
        prgDoc.Value = 1
        tctrlSnapshot.Enabled = False

        '-----------------------------------------
        'test for an internet connection to the serivce
        lblDocStatus.Text = "Checking web service availablity"
        lblDocStatus.Refresh()

        'this is interactive and allow retrys
        If TestWebConnection(strDVBaseURL) = False Then
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'the "NWIS Sites" layer is required for this tool - make sure the current map has that layer.
        lblDocStatus.Text = "Checking for NWIS Sites layer"
        lblDocStatus.Refresh()

        'get ArcMap Document and Focus Map
        Dim pMxDoc As IMxDocument = My.ArcMap.Document
        Dim pMap As IMap = pMxDoc.FocusMap

        'search for "NWIS Sites" layer
        Dim NWIS_FeatureLayer As IFeatureLayer = Nothing
        Dim pEnumLayer As IEnumLayer = pMap.Layers(Nothing, True)
        pEnumLayer.Reset()
        Dim pLayer As ILayer = pEnumLayer.Next
        While Not pLayer Is Nothing 'loop though all layers of the current focus map
            If pLayer.Name = "NWIS Sites" Then 'found it
                NWIS_FeatureLayer = pLayer
                Exit While 'done
            End If
            pLayer = pEnumLayer.Next
        End While

        'if the "NWIS Sites" layer was not found then give message and exit
        If NWIS_FeatureLayer Is Nothing Then 'didn't find it
            MessageBox.Show( _
                "The 'NWIS Sites' layer could not be found in the table of contents of the active map." & vbCrLf _
                & vbCrLf _
                & "The Snapshot tool requires the 'NWIS Sites' layer for populating downloaded sites and defining site symbology. " _
                & "Please refer to the documentation for further information.", _
                "Snapshot", _
                MessageBoxButtons.OK, _
                MessageBoxIcon.Exclamation, _
                MessageBoxDefaultButton.Button1)
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'get the sites to query
        lblDocStatus.Text = "Determining sites to query"
        lblDocStatus.Refresh()

        'get the feature class
        Dim NWIS_FeatureClass As IFeatureClass = NWIS_FeatureLayer.FeatureClass

        'set feature cursor to all sites
        Dim pFeatCursor As IFeatureCursor
        Dim pQfilter As New QueryFilter
        Dim nSites As Integer = NWIS_FeatureClass.FeatureCount(pQfilter) 'count sites
        pFeatCursor = NWIS_FeatureClass.Search(pQfilter, False)

        'if selected sites only, do filter
        If rbDVAllSites.Checked = False Then 'use selected sites
            Dim pFeatureSelection As IFeatureSelection
            Dim pSelectionSet As ISelectionSet
            pFeatureSelection = NWIS_FeatureLayer
            pSelectionSet = pFeatureSelection.SelectionSet
            pSelectionSet.Search(Nothing, False, pFeatCursor)
            nSites = pSelectionSet.Count
        End If

        '-----------------------------------------
        'give message if no sites
        Dim strMsg As String
        If nSites <= 0 Then
            If rbDVAllSites.Checked Then
                strMsg = "There are no sites in the NWIS Sites layer." _
                         & vbCrLf _
                         & vbCrLf & "Please use the Snapshot Sites tab to retrieve sites and try again."
            Else
                strMsg = "You are requesting data for selected sites," _
                         & vbCrLf & "but there are no selected sites in the NWIS Sites layer." _
                         & vbCrLf _
                         & vbCrLf & "Please select some sites from the NWIS Sites layer and try again."
            End If
            MessageBox.Show( _
                strMsg, _
                "Snapshot", _
                MessageBoxButtons.OK, _
                MessageBoxIcon.Information, _
                MessageBoxDefaultButton.Button1)
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'get the dates, pcode, and stat to use in URL
        Dim StartDate As String
        Dim EndDate As String
        If chkDVAllDates.Checked Then 'full date range - use the min max date settings (these are set during initialization at top)
            StartDate = dtpDVStartDate.MinDate.ToString("yyyy-MM-dd")
            EndDate = dtpDVEndDate.MaxDate.ToString("yyyy-MM-dd")
        Else 'use specified dates
            StartDate = dtpDVStartDate.Value.ToString("yyyy-MM-dd")
            EndDate = dtpDVEndDate.Value.ToString("yyyy-MM-dd")
        End If
        Dim ParameterCode As String = cboDVPcodes.Text.Substring(0, 5) 'assumes pcode     is 1st 5 characters of list item
        Dim StatisticCode As String = cboDVStat.Text.Substring(0, 5)   'assumes stat code is 1st 5 characters of list item

        '-----------------------------------------
        'echo search criteria and confirm action
        'the search can take a while and we want the user to explicitly review what they are asking for
        strMsg = "Search Criteria:" & vbCrLf & vbCrLf
        If rbDVAllSites.Checked Then
            strMsg = strMsg & "Sites: ALL " & nSites.ToString & " site(s) in NWIS Sites Layer" & vbCrLf
        Else
            strMsg = strMsg & "Sites: " & nSites.ToString & " SELECTED site(s) in NWIS Sites Layer" & vbCrLf
        End If
        strMsg = strMsg & "Parameter Code: " & cboDVPcodes.Text & vbCrLf
        strMsg = strMsg & "Statistic: " & cboDVStat.Text & vbCrLf
        If chkDVAllDates.Checked Then
            strMsg = strMsg & "Date Range: All available" & vbCrLf
        Else
            'EndDate.Subtract(DateStart).Days.ToString)
            strMsg = strMsg & "Date Range: " & dtpDVStartDate.Value.ToShortDateString & " though " & dtpDVEndDate.Value.ToShortDateString & " (" & (dtpDVEndDate.Value.Subtract(dtpDVStartDate.Value).Days + 1).ToString & " days)" & vbCrLf
        End If
        strMsg = strMsg & vbCrLf & "Retrieve Daily Value data matching these criteria?"
        strMsg = strMsg & vbCrLf & "Any previously retrieved Daily Value data will be overwritten."

        Dim strResp As String = MessageBox.Show( _
            strMsg, _
            "Snapshot", _
            MessageBoxButtons.YesNo, _
            MessageBoxIcon.Question, _
            MessageBoxDefaultButton.Button1)
        If strResp = DialogResult.No Then
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'ok - we are set to do a full uninterupted data query and upload
        lblDocStatus.Text = "Preparing database for writing"
        lblDocStatus.Refresh()

        'start a new Stopwatch (maybe put this at top as a global and start/stop same stopwatch).
        Dim stopwatch As Stopwatch = stopwatch.StartNew

        'truncate the DV tables - THIS DELETES ALL PREVIOUSLY OBTAINED DATA FROM TABLE
        Dim NWIS_dataset As IDataset = NWIS_FeatureClass
        Dim MyWorkspace As IWorkspace = NWIS_dataset.Workspace
        Dim pSource = MyWorkspace.PathName
        TruncTables(pSource, "dv_result")

        'open direct ODBC connection to DB
        Dim oConn As OdbcConnection
        Dim comm As OdbcCommand = Nothing
        Dim connectionString As String = "Driver={Microsoft Access Driver (*.mdb)};" & _
            "Dbq=" & pSource & ";" & _
            "Uid=;" & _
            "Pwd="
        oConn = New OdbcConnection(connectionString)
        oConn.Open()

        '-----------------------------------------
        'loop through sites and get data using individual web queries
        Dim i As Integer
        Dim iSitesQueried As Integer = 0
        Dim iSitesWithData As Integer = 0
        Dim nValTotal As Integer = 0

        'goto 1st feature
        Dim pFeature As IFeature = pFeatCursor.NextFeature

        'loop over sites
        Do While pFeature IsNot Nothing
            Try
                'reset the XML node iterations
                i = 0  'counts number of values successfully written for this site

                'get site number
                Dim IndexSiteNo As Long = pFeature.Fields.FindFieldByAliasName("Site Number")
                Dim SiteNo As String = Microsoft.VisualBasic.Trim(pFeature.Value(IndexSiteNo))

                'update status
                lblDocStatus.Text = "Site " & SiteNo & ": Querying web service"
                lblDocStatus.Refresh()
                iSitesQueried = iSitesQueried + 1
                If prgDoc.Value < 100 Then
                    prgDoc.Value = 100 * iSitesQueried / nSites
                End If
                prgDoc.Refresh()

                'set URL for NWIS web service (new URL as of 10-18-2011)
                Dim WS_URL As String = strDVBaseURL _
                                       & "?site=" & SiteNo _
                                       & "&parameterCd=" & ParameterCode _
                                       & "&statCd=" & StatisticCode _
                                       & "&agencyCd=USGS" _
                                       & "&startDT=" & StartDate _
                                       & "&endDT=" & EndDate _
                                       & "&format=waterml,1.1"

                'retrieve XML document from web service.
                'note: if valid site and the parameter codes exist for the site, webservice returns valid XML
                '      if no data for the requested time period, returns valid XML but with no tags for the requested data
                '      in that case, catch will not be triggered but no data will be caught by the "i" counter
                '
                '      if invalid site and/or parameter codes, webservice returns "bad request" page
                '      these cases will trigger this catch
                Dim reader As System.Xml.XmlReader = System.Xml.XmlReader.Create(WS_URL)
                lblDocStatus.Text = "Site " & SiteNo & ": Parsing response"
                lblDocStatus.Refresh()

                'loop though XML nodes
                While (reader.Read())
                    Try
                        'go to next XML node
                        reader.MoveToContent()

                        'skip if not the required node
                        'If reader.Name <> "value" Then Continue While 'OLD URL
                        If reader.Name <> "ns1:value" Then Continue While

                        'direct write to table using ODBC connection
                        'note: bad date or value conversions will cause this table row to be skipped
                        '      and next XML node read
                        Dim pSQl As String = "INSERT into dv_result(" _
                                    & "siteno," _
                                    & "xml_param," _
                                    & "xml_stat," _
                                    & "xml_date_and_time," _
                                    & "xml_qualifiers," _
                                    & "xml_value) " _
                            & "VALUES( " _
                                    & "'" & SiteNo & "'," _
                                    & "'" & ParameterCode & "'," _
                                    & "'" & StatisticCode & "'," _
                                    & "#" & Convert.ToDateTime(reader.Item("dateTime")) & "#," _
                                    & "'" & reader.Item("qualifiers") & "'," _
                                    & Convert.ToDouble(reader.ReadString()) _
                            & ")"
                        comm = New OdbcCommand(pSQl, oConn)
                        comm.ExecuteNonQuery()
                        comm.Dispose()

                        i = i + 1 'increment number of nodes read for this site
                        nValTotal = nValTotal + 1 'increment total number of data values retrieved

                    Catch
                        'do nothing - goto next XML node

                    End Try

                End While

            Catch
                'do nothing - goto next site

            End Try

            'increment overall SitesWithData if this site had some data successfully written
            If i > 0 Then iSitesWithData = iSitesWithData + 1

            'goto next feature (site)
            pFeature = pFeatCursor.NextFeature

            'flush event queue
            Application.DoEvents()
        Loop

        'close DB connection
        If comm IsNot Nothing Then comm.Dispose()
        oConn.Close()
        oConn.Dispose()

        'refresh the map
        pMxDoc.ActiveView.Refresh()

        'add activity to log
        ProcSQL(pSource, "Insert INTO Snapshot_DL_Date (Snapshot_Query, Snapshot_Date) VALUES('Daily Values', #" & Now() & "#)")

        'stop stopwatch
        stopwatch.Stop()

        'give message
        MessageBox.Show( _
            "Daily Values request complete." & vbCrLf _
            & vbCrLf _
            & iSitesQueried.ToString & " site(s) queried." & vbCrLf _
            & iSitesWithData.ToString & " site(s) had data available for the specified parameter and time period (" & System.Math.Round(100.0 * iSitesWithData / iSitesQueried).ToString & "%)." & vbCrLf _
            & vbCrLf _
            & vbCrLf _
            & "Total number of data records retrieved: " & nValTotal.ToString & vbCrLf _
            & "Elapsed time: " & stopwatch.Elapsed.Days.ToString & " days " & stopwatch.Elapsed.Hours.ToString & " hours " & stopwatch.Elapsed.Minutes.ToString & " minutes " & stopwatch.Elapsed.Seconds.ToString & " seconds", _
            "Snapshot", _
            MessageBoxButtons.OK, _
            MessageBoxIcon.Information, _
            MessageBoxDefaultButton.Button1)

        'cleanup
        ExitCleanUp()

    End Sub 'DVGet


    '==========================================================
    '==========================================================
    Public Sub UVGet()
        'retrieve Unit Value data using current settings

        'no additional checking / validation required for this sub

        'start the progress bar and disable Snapshot tabs
        prgDoc.Value = 1
        tctrlSnapshot.Enabled = False

        '-----------------------------------------
        'test for an internet connection to the serivce before anything
        lblDocStatus.Text = "Checking web service availablity"
        lblDocStatus.Refresh()

        'this is interactive and allow retrys
        If TestWebConnection(strUVBaseURL) = False Then
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'the "NWIS Sites" layer is required for this tool - make sure the current map has that layer.
        lblDocStatus.Text = "Checking for NWIS Sites layer"
        lblDocStatus.Refresh()

        'get ArcMap Document and Focus Map
        Dim pMxDoc As IMxDocument = My.ArcMap.Document
        Dim pMap As IMap = pMxDoc.FocusMap

        'search for "NWIS Sites" layer
        Dim NWIS_FeatureLayer As IFeatureLayer = Nothing
        Dim pEnumLayer As IEnumLayer = pMap.Layers(Nothing, True)
        pEnumLayer.Reset()
        Dim pLayer As ILayer = pEnumLayer.Next
        While Not pLayer Is Nothing 'loop though all layers of the current focus map
            If pLayer.Name = "NWIS Sites" Then 'found it
                NWIS_FeatureLayer = pLayer
                Exit While 'done
            End If
            pLayer = pEnumLayer.Next
        End While

        'if the "NWIS Sites" layer was not found then we can't continue
        If NWIS_FeatureLayer Is Nothing Then 'didn't find it
            MessageBox.Show( _
                "The 'NWIS Sites' layer could not be found in the table of contents of the active map." & vbCrLf _
                & vbCrLf _
                & "The Snapshot tool requires the 'NWIS Sites' layer for populating downloaded sites and defining site symbology. " _
                & "Please refer to the documentation for further information.", _
                "Snapshot", _
                MessageBoxButtons.OK, _
                MessageBoxIcon.Information, _
                MessageBoxDefaultButton.Button1)
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'get the sites to query
        lblDocStatus.Text = "Determining sites to query"
        lblDocStatus.Refresh()

        'get the feature class
        Dim NWIS_FeatureClass As IFeatureClass = NWIS_FeatureLayer.FeatureClass

        'set feature cursor to all sites
        Dim pFeatCursor As IFeatureCursor
        Dim pQfilter As New QueryFilter
        Dim nSites As Integer = NWIS_FeatureClass.FeatureCount(pQfilter) 'count sites
        pFeatCursor = NWIS_FeatureClass.Search(pQfilter, False)

        'if selected sites only, do filter
        If rbUVAllSites.Checked = False Then 'use selected sites
            Dim pFeatureSelection As IFeatureSelection
            Dim pSelectionSet As ISelectionSet
            pFeatureSelection = NWIS_FeatureLayer
            pSelectionSet = pFeatureSelection.SelectionSet
            pSelectionSet.Search(Nothing, False, pFeatCursor)
            nSites = pSelectionSet.Count
        End If

        '-----------------------------------------
        'give message if no sites
        Dim strMsg As String
        If nSites <= 0 Then
            If rbUVAllSites.Checked Then
                strMsg = "There are no sites in the NWIS Sites layer." _
                         & vbCrLf _
                         & vbCrLf & "Please use the Snapshot Sites tab to retrieve sites and try again."
            Else
                strMsg = "You are requesting data for selected sites," _
                         & vbCrLf & "but there are no selected sites in the NWIS Sites layer." _
                         & vbCrLf _
                         & vbCrLf & "Please select some sites from the NWIS Sites layer and try again."
            End If
            MessageBox.Show( _
                strMsg, _
                "Snapshot", _
                MessageBoxButtons.OK, _
                MessageBoxIcon.Information, _
                MessageBoxDefaultButton.Button1)
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'get the dates, pcode, and stat to use in URL
        Dim parameterCd As String = cboUVPcodes.Text.Substring(0, 5) 'assumes pcode is 1st 5 characters
        Dim ts As TimeSpan = New System.TimeSpan(CInt(updUVDays.Value - 1), 0, 0, 0) 'specified # days
        Dim dtmStartDate As DateTime = dtpUVEndDate.Value.Subtract(ts) 'go back specified # days
        Dim dtmEndDate As DateTime = dtpUVEndDate.Value
        Dim StartDate As String = dtmStartDate.ToString("yyyy-MM-dd")
        Dim EndDate As String = dtmEndDate.ToString("yyyy-MM-dd")

        '-----------------------------------------
        'echo search criteria and confirm action
        'the search can take a while and we want the user to explicitly review what they are asking for
        strMsg = "Search Criteria:" & vbCrLf & vbCrLf
        If rbUVAllSites.Checked Then
            strMsg = strMsg & "Sites: ALL " & nSites.ToString & " site(s) in NWIS Sites Layer" & vbCrLf
        Else
            strMsg = strMsg & "Sites: " & nSites.ToString & " SELECTED site(s) in NWIS Sites Layer" & vbCrLf
        End If
        strMsg = strMsg & "Parameter Code: " & cboUVPcodes.Text & vbCrLf
        strMsg = strMsg & "Date Range: " & StartDate & " though " & EndDate & " (" & (dtmEndDate.Subtract(dtmStartDate).Days + 1).ToString & " days)" & vbCrLf
        strMsg = strMsg & vbCrLf & "Retrieve Unit Value data matching these criteria?"
        strMsg = strMsg & vbCrLf & "Any previously retrieved Unit Value data will be overwritten."

        Dim strResp As String = MessageBox.Show( _
            strMsg, _
            "Snapshot", _
            MessageBoxButtons.YesNo, _
            MessageBoxIcon.Question, _
            MessageBoxDefaultButton.Button1)
        If strResp = DialogResult.No Then
            ExitCleanUp()
            Exit Sub
        End If

        '-----------------------------------------
        'ok - we are set to do a full uninterupted data query and upload
        lblDocStatus.Text = "Preparing database for writing"
        lblDocStatus.Refresh()

        'start a new Stopwatch (maybe put this at top as a global and start/stop same stopwatch).
        Dim stopwatch As Stopwatch = stopwatch.StartNew

        'truncate the UV tables - THIS DELETES ALL PREVIOUSLY OBTAINED DATA FROM TABLE
        Dim NWIS_dataset As IDataset = NWIS_FeatureClass
        Dim MyWorkspace As IWorkspace = NWIS_dataset.Workspace
        Dim pSource = MyWorkspace.PathName
        TruncTables(pSource, "uv_result")

        'open direct ODBC connection to DB
        Dim oConn As OdbcConnection
        Dim comm As OdbcCommand = Nothing
        Dim connectionString As String = "Driver={Microsoft Access Driver (*.mdb)};" & _
            "Dbq=" & pSource & ";" & _
            "Uid=;" & _
            "Pwd="
        oConn = New OdbcConnection(connectionString)
        oConn.Open()

        '-----------------------------------------
        'loop through sites and get data using individual web queries
        Dim i As Integer
        Dim iSitesQueried As Integer = 0
        Dim iSitesWithData As Integer = 0
        Dim nValTotal As Integer = 0

        'goto 1st feature
        Dim pFeature As IFeature = pFeatCursor.NextFeature

        'loop over sites
        Do While pFeature IsNot Nothing
            Try
                'reset the XML node iterations
                i = 0  'counts number of values successfully written for this site

                'get site number
                Dim IndexSiteNo As Long = pFeature.Fields.FindFieldByAliasName("Site Number")
                Dim SiteNo As String = Microsoft.VisualBasic.Trim(pFeature.Value(IndexSiteNo))

                'update status
                lblDocStatus.Text = "Site " & SiteNo & ": Querying web service"
                lblDocStatus.Refresh()
                iSitesQueried = iSitesQueried + 1
                If prgDoc.Value < 100 Then
                    prgDoc.Value = 100 * iSitesQueried / nSites
                End If
                prgDoc.Refresh()

                'set URL for NWIS web service - use mapper format for speed
                Dim WS_URL As String = strUVBaseURL _
                                       & "?sites=" & SiteNo _
                                       & "&startDT=" & StartDate _
                                       & "&endDT=" & EndDate _
                                       & "&parameterCd=" & parameterCd

                'note: if valid site and the parameter codes exist for the site, webservice returns valid XML
                '      if no data for the requested time period, returns valid XML but with no tags for the requested data
                '      in that case, catch will not be triggered but no data will be caught by the "i" counter
                '
                '      if invalid site and/or parameter codes, webservice returns "bad request" page
                '      these cases will trigger this catch
                Dim reader As System.Xml.XmlReader = System.Xml.XmlReader.Create(WS_URL)
                lblDocStatus.Text = "Site " & SiteNo & ": Parsing response"
                lblDocStatus.Refresh()

                'loop though XML nodes
                While (reader.Read())
                    Try
                        'go to next XML node
                        reader.MoveToContent()

                        'skip if not the required node
                        If reader.Name <> "ns1:value" Then Continue While

                        'direct write to table using ODBC connection
                        'note: bad date or value conversions will cause this table row to be skipped
                        '      and next XML node read
                        Dim pSQl As String = "INSERT into uv_result(" _
                                    & "siteno," _
                                    & "xml_param," _
                                    & "xml_date_and_time," _
                                    & "xml_qualifiers," _
                                    & "xml_value) " _
                            & "VALUES( " _
                                    & "'" & SiteNo & "'," _
                                    & "'" & parameterCd & "'," _
                                    & "#" & Convert.ToDateTime(reader.Item("dateTime")) & "#," _
                                    & "'" & reader.Item("qualifiers") & "'," _
                                    & Convert.ToDouble(reader.ReadString()) _
                            & ")"
                        'MsgBox("INSERT: " & pSQl)
                        comm = New OdbcCommand(pSQl, oConn)
                        comm.ExecuteNonQuery()
                        comm.Dispose()

                        i = i + 1 'increment number of nodes read for this site
                        nValTotal = nValTotal + 1 'increment total number of data values retrieved

                    Catch
                        'do nothing - goto next XML node

                    End Try

                End While

            Catch
                'do nothing - goto next site

            End Try

            'increment if site had some data
            If i > 0 Then iSitesWithData = iSitesWithData + 1

            'goto next feature (site)
            pFeature = pFeatCursor.NextFeature

            'flush event queue
            Application.DoEvents()

        Loop

        'close DB connection
        If comm IsNot Nothing Then comm.Dispose()
        oConn.Close()
        oConn.Dispose()

        'refresh the map
        pMxDoc.ActiveView.Refresh()

        'add activity to log
        ProcSQL(pSource, "Insert INTO Snapshot_DL_Date (Snapshot_Query, Snapshot_Date) VALUES('Unit Values', #" & Now() & "#)")

        'stop stopwatch
        stopwatch.Stop()

        'give message
        MessageBox.Show( _
            "Unit Values request complete." _
            & vbCrLf _
            & vbCrLf & iSitesQueried.ToString & " site(s) queried." _
            & vbCrLf & iSitesWithData.ToString & " site(s) had data available for the specified parameter and time period (" & System.Math.Round(100.0 * iSitesWithData / iSitesQueried).ToString & "%)." _
            & vbCrLf _
            & vbCrLf _
            & "Total number of data records retrieved: " & nValTotal.ToString & vbCrLf _
            & "Elapsed time: " & stopwatch.Elapsed.Days.ToString & " days " & stopwatch.Elapsed.Hours.ToString & " hours " & stopwatch.Elapsed.Minutes.ToString & " minutes " & stopwatch.Elapsed.Seconds.ToString & " seconds", _
            "Snapshot", _
            MessageBoxButtons.OK, _
            MessageBoxIcon.Information, _
            MessageBoxDefaultButton.Button1)

        'cleanup
        ExitCleanUp()

    End Sub 'UVGet


    '==========================================================
    '==========================================================
    'HELPER SUBS / FUNCTIONS

    '----------------------------------------------------------
    'UpdateForm
    Private Sub UpdateForm()
        'update form controls of currently selected tab using the current user settings
        'enable / disabling and validation done

        'set the valid and error background colors for controls
        'note: datetime pickers can't change background - this is known VS bug.
        Dim validBackColor As Drawing.Color = Drawing.Color.White
        Dim errorBackColor As Drawing.Color = Drawing.Color.MistyRose

        'to save time, only the active tab needs to be updated
        Select Case tctrlSnapshot.SelectedTab.Name.ToUpper
            Case "SITES"
                'Sites TAB:
                btnSitesGet.Enabled = True

                'data types - if ALL checked, disable rest
                If chkSitesDataTypeAll.Checked Then
                    chkSitesDataTypeAll.Enabled = True
                    chkSitesDataTypeQW.Enabled = False
                    chkSitesDataTypeDV.Enabled = False
                    chkSitesDataTypeUV.Enabled = False
                Else 'enable all
                    chkSitesDataTypeAll.Enabled = True
                    chkSitesDataTypeQW.Enabled = True
                    chkSitesDataTypeDV.Enabled = True
                    chkSitesDataTypeUV.Enabled = True
                End If

                'data types - need at least 1 box checked
                ErrorProvider1.SetError(chkSitesDataTypeAll, "")
                If _
                    Not chkSitesDataTypeAll.Checked AndAlso _
                    Not chkSitesDataTypeQW.Checked AndAlso _
                    Not chkSitesDataTypeDV.Checked AndAlso _
                    Not chkSitesDataTypeUV.Checked Then
                    btnSitesGet.Enabled = False
                    ErrorProvider1.SetError(chkSitesDataTypeAll, "At least 1 Data Type must be selected")
                End If

                'site types - if ALL checked, disable rest
                If chkSitesAll.Checked Then
                    chkSitesAll.Enabled = True
                    chkSitesSW.Enabled = False
                    chkSitesGW.Enabled = False
                    chkSitesSP.Enabled = False
                    chkSitesAT.Enabled = False
                    chkSitesOT.Enabled = False
                Else 'enable all
                    chkSitesAll.Enabled = True
                    chkSitesSW.Enabled = True
                    chkSitesGW.Enabled = True
                    chkSitesSP.Enabled = True
                    chkSitesAT.Enabled = True
                    chkSitesOT.Enabled = True
                End If

                'site types - need at least 1 box checked
                ErrorProvider1.SetError(chkSitesAll, "")
                If _
                    Not chkSitesAll.Checked AndAlso _
                    Not chkSitesSW.Checked AndAlso _
                    Not chkSitesGW.Checked AndAlso _
                    Not chkSitesSP.Checked AndAlso _
                    Not chkSitesAT.Checked AndAlso _
                    Not chkSitesOT.Checked Then
                    btnSitesGet.Enabled = False
                    ErrorProvider1.SetError(chkSitesAll, "At least 1 Site Type must be selected")
                End If

            Case "QW"
                'QW TAB:
                btnQWGet.Enabled = True

                'enable / disable based on AllPcodes checkbox
                If chkQWAllPcodes.Checked Then
                    txtQWPcodes.Enabled = False
                    lblQWnPcode.Visible = False
                    btnQWTopTenPcodes.Enabled = False
                    btnQWPcodePicker.Enabled = False
                Else
                    txtQWPcodes.Enabled = True
                    lblQWnPcode.Visible = True
                    btnQWTopTenPcodes.Enabled = True
                    btnQWPcodePicker.Enabled = True
                End If

                'enable / disable datePickers based on AllDates checkbox
                If chkQWAllDates.Checked Then
                    dtpQWStartDate.Enabled = False
                    dtpQWEndDate.Enabled = False
                Else
                    dtpQWStartDate.Enabled = True
                    dtpQWEndDate.Enabled = True
                End If

                'pcodes
                ErrorProvider1.SetError(txtQWPcodes, "")
                txtQWPcodes.BackColor = validBackColor
                If chkQWAllPcodes.Checked = False Then
                    'replace new lines with spaces
                    Dim str As String = System.Text.RegularExpressions.Regex.Replace(txtQWPcodes.Text, Environment.NewLine, " ", System.Text.RegularExpressions.RegexOptions.Compiled)

                    'trim leading and trailing spaces and replace multiple spaces with one ';'
                    str = System.Text.RegularExpressions.Regex.Replace(str.Trim, "\s+", ";", System.Text.RegularExpressions.RegexOptions.Compiled)

                    'split on the ';'
                    Dim pcodes() As String = str.Split(CChar(";")) 'can't split just using <string>.Split because vbCrLf is 2 characters (but could replace with single char like ';' then do this)

                    'loop though bottom up and check
                    Dim noValidPcodes As Boolean = True
                    For i As Integer = pcodes.GetUpperBound(0) To pcodes.GetLowerBound(0) Step -1
                        If pcodes(i).Length <> 5 OrElse Not IsNumeric(pcodes(i)) Then
                            btnQWGet.Enabled = False
                            ErrorProvider1.SetError(txtQWPcodes, "Parameter codes must be 5-digit numbers")
                            txtQWPcodes.BackColor = errorBackColor
                            Exit For
                        End If
                    Next

                    'count pcodes (invalid and valid) and set label
                    Dim nPcodes As Integer = 0
                    If str <> "" Then nPcodes = (pcodes.GetUpperBound(0) + 1)
                    lblQWnPcode.Text = "Count: " & nPcodes.ToString
                    If nPcodes = 0 Then
                        btnQWGet.Enabled = False
                        ErrorProvider1.SetError(txtQWPcodes, "No parameter codes are specified")
                        txtQWPcodes.BackColor = errorBackColor
                    End If

                End If

                'make sure start date is before or same as end date
                ErrorProvider1.SetError(dtpQWEndDate, "") 'default OK
                dtpQWStartDate.BackColor = validBackColor
                dtpQWEndDate.BackColor = validBackColor
                If System.DateTime.Compare(dtpQWStartDate.Value, dtpQWEndDate.Value) > 0 AndAlso chkQWAllDates.Checked = False Then
                    btnQWGet.Enabled = False
                    ErrorProvider1.SetError(dtpQWEndDate, "The ending date must be the same or after the starting date")
                    dtpQWStartDate.BackColor = errorBackColor
                    dtpQWEndDate.BackColor = errorBackColor
                End If

            Case "DV"
                'DV TAB:
                btnDVGet.Enabled = True

                'if pcode entry is not a list item, make sure entered pcode is 5 digit number
                ErrorProvider1.SetError(cboDVPcodes, "") 'default OK
                cboDVPcodes.BackColor = validBackColor
                If cboDVPcodes.SelectedIndex < 0 And (cboDVPcodes.Text.Length <> 5 Or Not IsNumeric(cboDVPcodes.Text)) Then
                    btnDVGet.Enabled = False
                    ErrorProvider1.SetError(cboDVPcodes, "Entered parameter code must be a 5-digit number." & vbCrLf _
                                                       & "Please enter a 5-digit number or select an item from the top-ten list.")
                    cboDVPcodes.BackColor = errorBackColor
                End If

                'enable / disable datePickers based on AllDates checkbox
                If chkDVAllDates.Checked Then
                    dtpDVStartDate.Enabled = False
                    dtpDVEndDate.Enabled = False
                Else
                    dtpDVStartDate.Enabled = True
                    dtpDVEndDate.Enabled = True
                End If

                'make sure start date is before or same as end date
                ErrorProvider1.SetError(dtpDVEndDate, "") 'default OK
                dtpDVStartDate.BackColor = validBackColor
                dtpDVEndDate.BackColor = validBackColor
                If System.DateTime.Compare(dtpDVStartDate.Value, dtpDVEndDate.Value) > 0 AndAlso chkDVAllDates.Checked = False Then
                    btnDVGet.Enabled = False
                    ErrorProvider1.SetError(dtpDVEndDate, "The ending date must be the same or after the starting date")
                    dtpDVStartDate.BackColor = errorBackColor
                    dtpDVEndDate.BackColor = errorBackColor
                End If

            Case "UV"
                'UV TAB:
                btnUVGet.Enabled = True

                'if pcode entry is not a list item, make sure entered pcode is 5 digit number
                ErrorProvider1.SetError(cboUVPcodes, "") 'default OK
                cboUVPcodes.BackColor = validBackColor
                If cboUVPcodes.SelectedIndex < 0 And (cboUVPcodes.Text.Length <> 5 Or Not IsNumeric(cboUVPcodes.Text)) Then
                    btnUVGet.Enabled = False
                    ErrorProvider1.SetError(cboUVPcodes, "Entered parameter code must be a 5-digit number." & vbCrLf _
                                                       & "Please enter a 5-digit number or select an item from the top-ten list.")
                    cboUVPcodes.BackColor = errorBackColor
                End If

            Case "HELP"
                'Help TAB:
                'nothing to update or validate

            Case Else
                'problem, but do nothing
        End Select

    End Sub 'UpdateForm


    'ExitCleanUp
    Private Sub ExitCleanUp()
        'call this whenever exiting one of the GetData buttons
        'it re-enables the form and resets status message, progress bar, etc.
        tctrlSnapshot.Enabled = True
        tctrlSnapshot.Refresh()
        prgDoc.Value = 0
        lblDocStatus.Text = ""
    End Sub


    'TestWebConnection
    Public Function TestWebConnection(ByVal strURL As String) As Boolean
        'test connection to input 'strURL' (complete URL string)
        'if success, returns true.
        'if fails, will popup dialog allowing retry or cancel
        'retry will loop until success or cancel hit

        Dim intResponse As Integer = DialogResult.Retry 'initialize loop
        Do While intResponse = DialogResult.Retry
            If InternetConnectionAvailable(strURL) = False Then 'can't connect
                intResponse = MessageBox.Show( _
                       "Cannot establish connection to the web data service at:" _
                       & vbCrLf & strURL _
                       & vbCrLf _
                       & vbCrLf _
                       & "The service may be unavailable or you may not be connected to the internet.", _
                       "Snapshot", _
                       MessageBoxButtons.RetryCancel, _
                       MessageBoxIcon.Exclamation, _
                       MessageBoxDefaultButton.Button2)
                If intResponse = DialogResult.Cancel Then Return False 'quit trying
            Else 'connect OK
                Return True
            End If
        Loop
        Return False
    End Function
    Private Declare Function InternetCheckConnection Lib "wininet.dll" Alias "InternetCheckConnectionA" (ByVal lpszUrl As String, ByVal dwFlags As Long, ByVal dwReserved As Long) As Boolean
    Private Function InternetConnectionAvailable(ByVal strURL As String) As Boolean
        'check for active internet connection by pinging the webpage 'strURL'
        'returns True (connection OK) or False (can't connect)
        Return InternetCheckConnection(strURL, 1, 0)
    End Function


    'ProcSQL
    Private Sub ProcSQL(ByVal pfds As String, ByVal pSQL As String)
        'Generic SQl processor: Pass in the COMPLETE MDB (eg. D:\NWIS\SDnapshot\Snapshot.mdb) path
        'and (VALID) SQL statement and this will process it
        Dim oConn As OdbcConnection
        Dim comm As OdbcCommand
        Dim connectionString As String = "Driver={Microsoft Access Driver (*.mdb)};" & _
            "Dbq=" & pfds & ";" & _
            "Uid=;" & _
            "Pwd="
        oConn = New OdbcConnection(connectionString)
        oConn.Open()

        comm = New OdbcCommand(pSQL, oConn)
        comm.ExecuteNonQuery()
        comm.Dispose()

        'Clean up the mess
        oConn.Close()
        comm.Dispose()
        oConn.Dispose()

    End Sub


    'TruncTables
    Private Sub TruncTables(ByVal pFDS As String, ByVal tables As String)
        'truncate the specified tables
        'tables is a comma-separated string like: "Activity, ActivityDescription, ActivityStartTime, Result, ResultDescription, ResultMeasure, qw_result, qw_sample"

        Dim oConn As OdbcConnection
        Dim comm As OdbcCommand = Nothing
        Dim connectionString As String = "Driver={Microsoft Access Driver (*.mdb)};" & _
            "Dbq=" & pFDS & ";" & _
            "Uid=;" & _
            "Pwd="
        oConn = New OdbcConnection(connectionString)
        oConn.Open()

        Dim item, pSQl As String
        For Each item In Split(tables, ", ")
            pSQl = "DELETE FROM " & item
            comm = New OdbcCommand(pSQl, oConn)
            comm.ExecuteNonQuery()
            comm.Dispose()
        Next

        'Clean up the mess
        oConn.Close()
        comm.Dispose()
        oConn.Dispose()
    End Sub


    'GetFinalSampleStats
    Private Sub GetFinalSampleStats(ByVal pFDS As String, ByVal pErrorLog As String)
        Dim pSuccess As Boolean
        Dim oConn As OdbcConnection
        Dim comm As OdbcCommand = Nothing
        Dim dr As OdbcDataReader = Nothing
        Dim connectionString As String = "Driver={Microsoft Access Driver (*.mdb)};" & _
            "Dbq=" & pFDS & ";" & _
            "Uid=;" & _
            "Pwd="
        Dim pSQl = "SELECT SITENO, Min(sample_start_dt) AS MinOfsample_start_dt, Max(sample_start_dt) AS MaxOfsample_start_dt, Count(record_no_xml) AS CountOfrecord_no_xml" & _
        " FROM qw_sample" & _
        " GROUP BY SITENO"
        oConn = New OdbcConnection(connectionString)
        oConn.Open()
        Try
            comm = New OdbcCommand(pSQl, oConn)
            dr = comm.ExecuteReader()

            pSuccess = WriteHtml("<br><br><h2>Sample Stats</h2><Table border='1'><tr><th>Site</th><th>Min Date</th><th>Max Date</th><th>Sample Count</th></tr>", pErrorLog)
            While (dr.Read())
                pSuccess = WriteHtml("<tr><td><b>" & dr.GetValue(0).ToString() & "</b></td><td>" & FormatDateTime(dr.GetValue(1).ToString(), DateFormat.ShortDate) & "</td><td>" & FormatDateTime(dr.GetValue(2).ToString(), DateFormat.ShortDate) & "</td><td align='center'>" & dr.GetValue(3).ToString() & "</td></tr>", pErrorLog)
            End While

            pSuccess = WriteHtml("</Table>", pErrorLog)

        Catch Ex As Exception
            Console.WriteLine("An exception occurred: " & Ex.Message)
        End Try

        dr.Close()
        oConn.Close()
        comm.Dispose()
        oConn.Dispose()
    End Sub


    'WriteHtml
    Public Function WriteHtml(ByVal strData As String, ByVal FullPath As String, Optional ByVal ErrInfo As String = "") As Boolean
        Dim Contents As String = ""
        Dim bAns As Boolean = False
        Dim objReader As StreamWriter
        Try
            objReader = New StreamWriter(FullPath, True)
            objReader.Write(strData)
            objReader.Close()
            bAns = True
        Catch Ex As Exception
            ErrInfo = Ex.Message
        End Try
        Return bAns
    End Function


    'LaunchWeb
    Private Sub LaunchWeb(ByVal strURL As String)
        'launch strURL in browser

        'test for an internet connection to the serivce before anything
        'this is interactive and allow retrys
        If TestWebConnection("http://www.google.com/") = False Then
            ExitCleanUp()
            Exit Sub
        End If

        Try
            System.Diagnostics.Process.Start(strURL)
        Catch ex As Exception
            MessageBox.Show( _
                "Sorry, cannot access the web page: " & vbCrLf & strURL, _
                "Snapshot", _
                MessageBoxButtons.OK, _
                MessageBoxIcon.Information, _
                MessageBoxDefaultButton.Button1)
        End Try
    End Sub


    'SendErrorReport
    Public Sub SendErrorReport(ByVal ex As Exception)
        'create and upload an error report to FTP site
        'this works 'behind the scenes' without telling the user anything.

        'double-check: make sure the checkbox is checked enabling this
        If chkHelpSendErrorReport.Checked = False Then Exit Sub

        'set error file name - this will put in whatever the current directory happens to be (System.Environment.CurrentDirectory)
        'the file is deleted before exiting regardless of success / failure
        Dim strErrFile = "SNAPSHOT_USER_ERROR_REPORT_" & Now.ToString("yyyyMMdd_HHmmss") & ".txt"

        'set the FTP server and drop off location
        '  EXTERNAL - can only post file to the root /from_pub/cr/ directory ???
        '  need to check this out and see if we can create and post directly to a specifically set up folder
        Dim strFTPhost As String = "ftp://ftpext.usgs.gov"
        Dim strFTPdir As String = "/from_pub/cr/"
        Dim strFTPusr As String = ""
        Dim strFTPpwd As String = ""

        Try
            'try to get the map extent - if fail, still report other things
            Dim strSettings As String = "" _
                & "*************************************************************************" & vbCrLf _
                & "ADD-IN SETTINGS:" & vbCrLf _
                & vbCrLf _
                & "     strThisVersion: " & strThisVersion & vbCrLf _
                & "  strThisLastUpdate: " & strThisLastUpdate & vbCrLf _
                & vbCrLf _
                & "                      My.User.Name: " & My.User.Name.ToString & vbCrLf _
                & "        SystemInformation.UserName: " & SystemInformation.UserName.ToString & vbCrLf _
                & "  SystemInformation.UserDomainName: " & SystemInformation.UserDomainName.ToString & vbCrLf _
                & vbCrLf _
                & "    Run DateTime: " & Now.ToString("F") & vbCrLf _
                & vbCrLf _
                & "CurrentMapExtent: " & My.User.Name & vbCrLf
            Try
                Dim pMxDoc As IMxDocument = My.ArcMap.Document
                Dim pMap As IMap = pMxDoc.FocusMap
                Dim pEnv As IEnvelope = pMxDoc.ActiveView.Extent
                strSettings = strSettings & "      GeometryType = " & pEnv.GeometryType.ToString & vbCrLf
                strSettings = strSettings & "  SpatialReference = " & pEnv.SpatialReference.ToString & vbCrLf
                strSettings = strSettings & "              XMin = " & pEnv.XMin.ToString & vbCrLf
                strSettings = strSettings & "              XMax = " & pEnv.XMax.ToString & vbCrLf
                strSettings = strSettings & "              YMin = " & pEnv.YMin.ToString & vbCrLf
                strSettings = strSettings & "              YMax = " & pEnv.YMax.ToString & vbCrLf
            Catch
                strSettings = strSettings & "  ** ERROR TRYING TO DETERMINE **"
            End Try
            strSettings = strSettings & vbCrLf

            'get and write the selected tab:
            strSettings = strSettings _
                & "ACTIVE TAB: " & tctrlSnapshot.SelectedTab.Text.ToUpper & vbCrLf _
                & vbCrLf

            'get and write all tab settings:
            strSettings = strSettings _
            & "ALL TAB SETTINGS:" & vbCrLf _
            & "...SITES TAB..." & vbCrLf _
            & "       rbSitesAll = " & rbSitesAll.Checked.ToString & vbCrLf _
            & "    rbSitesActive = " & rbSitesActive.Checked.ToString & vbCrLf _
            & "  rbSitesInactive = " & rbSitesInactive.Checked.ToString & vbCrLf _
            & vbCrLf _
            & "       chkSitesDataTypeAll = " & chkSitesDataTypeAll.Checked.ToString & vbCrLf _
            & "       chkSitesDataTypeQW = " & chkSitesDataTypeQW.Checked.ToString & vbCrLf _
            & "       chkSitesDataTypeDV = " & chkSitesDataTypeDV.Checked.ToString & vbCrLf _
            & "       chkSitesDataTypeUV = " & chkSitesDataTypeUV.Checked.ToString & vbCrLf _
            & vbCrLf _
            & "       chkSitesAll = " & chkSitesAll.Checked.ToString & vbCrLf _
            & "       chkSitesSW = " & chkSitesSW.Checked.ToString & vbCrLf _
            & "       chkSitesGW = " & chkSitesGW.Checked.ToString & vbCrLf _
            & "       chkSitesSP = " & chkSitesSP.Checked.ToString & vbCrLf _
            & "       chkSitesAT = " & chkSitesAT.Checked.ToString & vbCrLf _
            & "       chkSitesOT = " & chkSitesOT.Checked.ToString & vbCrLf _
            & vbCrLf _
            & "...QW TAB..." & vbCrLf _
            & "       rbQWAllSites = " & rbQWAllSites.Checked.ToString & vbCrLf _
            & "  rbQWSelectedSites = " & rbQWSelectedSites.Checked.ToString & vbCrLf _
            & vbCrLf _
            & "        txtQWPcodes = " & txtQWPcodes.Text.ToString & vbCrLf _
            & "     chkQWAllPcodes = " & chkQWAllPcodes.Checked.ToString & vbCrLf _
            & vbCrLf _
            & "     dtpQWStartDate = " & dtpQWStartDate.Value.ToString & vbCrLf _
            & "       dtpQWEndDate = " & dtpQWEndDate.Value.ToString & vbCrLf _
            & "      chkQWAllDates = " & chkQWAllDates.Checked.ToString & vbCrLf _
            & vbCrLf _
            & "...DV TAB..." & vbCrLf _
            & "       rbDVAllSites = " & rbDVAllSites.Checked.ToString & vbCrLf _
            & "  rbDVSelectedSites = " & rbDVSelectedSites.Checked.ToString & vbCrLf _
            & vbCrLf _
            & "        cboDVPcodes = " & cboDVPcodes.Text & vbCrLf _
            & "          cboDVStat = " & cboDVStat.Text & vbCrLf _
            & vbCrLf _
            & "     dtpDVStartDate = " & dtpDVStartDate.Value.ToString & vbCrLf _
            & "       dtpDVEndDate = " & dtpDVEndDate.Value.ToString & vbCrLf _
            & "      chkDVAllDates = " & chkDVAllDates.Checked.ToString & vbCrLf _
            & vbCrLf _
            & "...UV TAB..." & vbCrLf _
            & "       rbUVAllSites = " & rbUVAllSites.Checked.ToString & vbCrLf _
            & "  rbUVSelectedSites = " & rbUVSelectedSites.Checked.ToString & vbCrLf _
            & vbCrLf _
            & "        cboUVPcodes = " & cboUVPcodes.Text & vbCrLf _
            & vbCrLf _
            & "          updUVDays = " & updUVDays.Value.ToString & vbCrLf _
            & "       dtpUVEndDate = " & dtpUVEndDate.Value.ToString & vbCrLf _
            & vbCrLf _
            & "...HELP TAB..." & vbCrLf _
            & "  chkHelpToolTips = " & chkHelpToolTips.Checked.ToString & vbCrLf _
            & vbCrLf

            'get exception details and build error message
            Dim Message As String = "[NOT AVAILABLE]"
            If ex.Message IsNot Nothing Then
                Message = ex.Message.ToString
            End If
            Dim Source As String = "[NOT AVAILABLE]"
            If ex.Source IsNot Nothing Then
                Source = ex.Source.ToString
            End If
            Dim TargetSite As String = "[NOT AVAILABLE]"
            If ex.TargetSite IsNot Nothing Then
                TargetSite = ex.TargetSite.ToString
            End If
            Dim StackTrace As String = "[NOT AVAILABLE]"
            If ex.StackTrace IsNot Nothing Then
                StackTrace = ex.StackTrace.ToString
            End If
            Dim InnerException As String = "[NOT AVAILABLE]"
            If ex.InnerException IsNot Nothing Then
                InnerException = ex.InnerException.ToString
            End If
            Dim HelpLink As String = "[NOT AVAILABLE]"
            If ex.HelpLink IsNot Nothing Then
                HelpLink = ex.HelpLink.ToString
            End If
            Dim strError As String = "" _
                & "*************************************************************************" & vbCrLf _
                & "Message:" & vbCrLf _
                & Message & vbCrLf _
                & vbCrLf _
                & "*************************************************************************" & vbCrLf _
                & "Source:" & vbCrLf _
                & Source & vbCrLf _
                & vbCrLf _
                & "*************************************************************************" & vbCrLf _
                & "TargetSite:" & vbCrLf _
                & TargetSite & vbCrLf _
                & vbCrLf _
                & "*************************************************************************" & vbCrLf _
                & "StackTrace:" & vbCrLf _
                & StackTrace & vbCrLf _
                & vbCrLf _
                & "*************************************************************************" & vbCrLf _
                & "InnerException:" & vbCrLf _
                & InnerException & vbCrLf _
                & vbCrLf _
                & "*************************************************************************" & vbCrLf _
                & "HelpLink:" & vbCrLf _
                & HelpLink & vbCrLf _
                & vbCrLf

            'write error file...
            Dim sr As System.IO.StreamWriter = New System.IO.StreamWriter(strErrFile)
            sr.Write(strSettings & strError)
            sr.Close()
            sr.Dispose()

            'upload file to FTP site
            Dim client As System.Net.WebClient = New System.Net.WebClient()
            client.Credentials = New System.Net.NetworkCredential(strFTPusr, strFTPpwd)
            client.UploadFile(strFTPhost & strFTPdir & strErrFile, strErrFile)
            client.Dispose()

        Catch
            'do nothing

        End Try

        'delete the local file - put outside above catch so file will always be deleted
        If System.IO.File.Exists(strErrFile) Then
            Try
                System.IO.File.Delete(strErrFile)
            Catch
                'do nothing
            End Try
        End If

    End Sub

End Class


